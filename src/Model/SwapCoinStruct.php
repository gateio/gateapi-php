<?php
/**
 * SwapCoinStruct
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * SwapCoinStruct Class Doc Comment
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class SwapCoinStruct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SwapCoinStruct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'pid' => 'int',
        'uid' => 'int',
        'coin' => 'string',
        'type' => 'int',
        'subtype' => 'string',
        'amount' => 'string',
        'exchange_rate' => 'string',
        'exchange_amount' => 'string',
        'update_stamp' => 'int',
        'create_stamp' => 'int',
        'status' => 'int',
        'protocol_type' => 'int',
        'client_order_id' => 'string',
        'source' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'pid' => null,
        'uid' => null,
        'coin' => null,
        'type' => null,
        'subtype' => null,
        'amount' => null,
        'exchange_rate' => null,
        'exchange_amount' => null,
        'update_stamp' => null,
        'create_stamp' => null,
        'status' => null,
        'protocol_type' => null,
        'client_order_id' => null,
        'source' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'pid' => 'pid',
        'uid' => 'uid',
        'coin' => 'coin',
        'type' => 'type',
        'subtype' => 'subtype',
        'amount' => 'amount',
        'exchange_rate' => 'exchange_rate',
        'exchange_amount' => 'exchange_amount',
        'update_stamp' => 'updateStamp',
        'create_stamp' => 'createStamp',
        'status' => 'status',
        'protocol_type' => 'protocol_type',
        'client_order_id' => 'client_order_id',
        'source' => 'source'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'pid' => 'setPid',
        'uid' => 'setUid',
        'coin' => 'setCoin',
        'type' => 'setType',
        'subtype' => 'setSubtype',
        'amount' => 'setAmount',
        'exchange_rate' => 'setExchangeRate',
        'exchange_amount' => 'setExchangeAmount',
        'update_stamp' => 'setUpdateStamp',
        'create_stamp' => 'setCreateStamp',
        'status' => 'setStatus',
        'protocol_type' => 'setProtocolType',
        'client_order_id' => 'setClientOrderId',
        'source' => 'setSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'pid' => 'getPid',
        'uid' => 'getUid',
        'coin' => 'getCoin',
        'type' => 'getType',
        'subtype' => 'getSubtype',
        'amount' => 'getAmount',
        'exchange_rate' => 'getExchangeRate',
        'exchange_amount' => 'getExchangeAmount',
        'update_stamp' => 'getUpdateStamp',
        'create_stamp' => 'getCreateStamp',
        'status' => 'getStatus',
        'protocol_type' => 'getProtocolType',
        'client_order_id' => 'getClientOrderId',
        'source' => 'getSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['pid'] = isset($data['pid']) ? $data['pid'] : null;
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['coin'] = isset($data['coin']) ? $data['coin'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['subtype'] = isset($data['subtype']) ? $data['subtype'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['exchange_amount'] = isset($data['exchange_amount']) ? $data['exchange_amount'] : null;
        $this->container['update_stamp'] = isset($data['update_stamp']) ? $data['update_stamp'] : null;
        $this->container['create_stamp'] = isset($data['create_stamp']) ? $data['create_stamp'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['protocol_type'] = isset($data['protocol_type']) ? $data['protocol_type'] : null;
        $this->container['client_order_id'] = isset($data['client_order_id']) ? $data['client_order_id'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Order ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets pid
     *
     * @return int|null
     */
    public function getPid()
    {
        return $this->container['pid'];
    }

    /**
     * Sets pid
     *
     * @param int|null $pid Product ID
     *
     * @return $this
     */
    public function setPid($pid)
    {
        $this->container['pid'] = $pid;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return int|null
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param int|null $uid User ID
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets coin
     *
     * @return string|null
     */
    public function getCoin()
    {
        return $this->container['coin'];
    }

    /**
     * Sets coin
     *
     * @param string|null $coin Currency
     *
     * @return $this
     */
    public function setCoin($coin)
    {
        $this->container['coin'] = $coin;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int|null $type Type 0-Staking 1-Redemption
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets subtype
     *
     * @return string|null
     */
    public function getSubtype()
    {
        return $this->container['subtype'];
    }

    /**
     * Sets subtype
     *
     * @param string|null $subtype 子类型
     *
     * @return $this
     */
    public function setSubtype($subtype)
    {
        $this->container['subtype'] = $subtype;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount Amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return string|null
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param string|null $exchange_rate Exchange ratio
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets exchange_amount
     *
     * @return string|null
     */
    public function getExchangeAmount()
    {
        return $this->container['exchange_amount'];
    }

    /**
     * Sets exchange_amount
     *
     * @param string|null $exchange_amount Redemption Amount
     *
     * @return $this
     */
    public function setExchangeAmount($exchange_amount)
    {
        $this->container['exchange_amount'] = $exchange_amount;

        return $this;
    }

    /**
     * Gets update_stamp
     *
     * @return int|null
     */
    public function getUpdateStamp()
    {
        return $this->container['update_stamp'];
    }

    /**
     * Sets update_stamp
     *
     * @param int|null $update_stamp 更新时间戳
     *
     * @return $this
     */
    public function setUpdateStamp($update_stamp)
    {
        $this->container['update_stamp'] = $update_stamp;

        return $this;
    }

    /**
     * Gets create_stamp
     *
     * @return int|null
     */
    public function getCreateStamp()
    {
        return $this->container['create_stamp'];
    }

    /**
     * Sets create_stamp
     *
     * @param int|null $create_stamp Transaction timestamp
     *
     * @return $this
     */
    public function setCreateStamp($create_stamp)
    {
        $this->container['create_stamp'] = $create_stamp;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int|null $status status 1-success
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets protocol_type
     *
     * @return int|null
     */
    public function getProtocolType()
    {
        return $this->container['protocol_type'];
    }

    /**
     * Sets protocol_type
     *
     * @param int|null $protocol_type DEFI Protocol Type
     *
     * @return $this
     */
    public function setProtocolType($protocol_type)
    {
        $this->container['protocol_type'] = $protocol_type;

        return $this;
    }

    /**
     * Gets client_order_id
     *
     * @return string|null
     */
    public function getClientOrderId()
    {
        return $this->container['client_order_id'];
    }

    /**
     * Sets client_order_id
     *
     * @param string|null $client_order_id Reference ID
     *
     * @return $this
     */
    public function setClientOrderId($client_order_id)
    {
        $this->container['client_order_id'] = $client_order_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source Order Origin
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


