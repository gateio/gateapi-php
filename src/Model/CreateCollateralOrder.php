<?php
/**
 * CreateCollateralOrder
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * CreateCollateralOrder Class Doc Comment
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class CreateCollateralOrder implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateCollateralOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'collateral_amount' => 'string',
        'collateral_currency' => 'string',
        'borrow_amount' => 'string',
        'borrow_currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'collateral_amount' => null,
        'collateral_currency' => null,
        'borrow_amount' => null,
        'borrow_currency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'collateral_amount' => 'collateral_amount',
        'collateral_currency' => 'collateral_currency',
        'borrow_amount' => 'borrow_amount',
        'borrow_currency' => 'borrow_currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'collateral_amount' => 'setCollateralAmount',
        'collateral_currency' => 'setCollateralCurrency',
        'borrow_amount' => 'setBorrowAmount',
        'borrow_currency' => 'setBorrowCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'collateral_amount' => 'getCollateralAmount',
        'collateral_currency' => 'getCollateralCurrency',
        'borrow_amount' => 'getBorrowAmount',
        'borrow_currency' => 'getBorrowCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['collateral_amount'] = isset($data['collateral_amount']) ? $data['collateral_amount'] : null;
        $this->container['collateral_currency'] = isset($data['collateral_currency']) ? $data['collateral_currency'] : null;
        $this->container['borrow_amount'] = isset($data['borrow_amount']) ? $data['borrow_amount'] : null;
        $this->container['borrow_currency'] = isset($data['borrow_currency']) ? $data['borrow_currency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['collateral_amount'] === null) {
            $invalidProperties[] = "'collateral_amount' can't be null";
        }
        if ($this->container['collateral_currency'] === null) {
            $invalidProperties[] = "'collateral_currency' can't be null";
        }
        if ($this->container['borrow_amount'] === null) {
            $invalidProperties[] = "'borrow_amount' can't be null";
        }
        if ($this->container['borrow_currency'] === null) {
            $invalidProperties[] = "'borrow_currency' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets collateral_amount
     *
     * @return string
     */
    public function getCollateralAmount()
    {
        return $this->container['collateral_amount'];
    }

    /**
     * Sets collateral_amount
     *
     * @param string $collateral_amount Collateral amount.
     *
     * @return $this
     */
    public function setCollateralAmount($collateral_amount)
    {
        $this->container['collateral_amount'] = $collateral_amount;

        return $this;
    }

    /**
     * Gets collateral_currency
     *
     * @return string
     */
    public function getCollateralCurrency()
    {
        return $this->container['collateral_currency'];
    }

    /**
     * Sets collateral_currency
     *
     * @param string $collateral_currency Collateral.
     *
     * @return $this
     */
    public function setCollateralCurrency($collateral_currency)
    {
        $this->container['collateral_currency'] = $collateral_currency;

        return $this;
    }

    /**
     * Gets borrow_amount
     *
     * @return string
     */
    public function getBorrowAmount()
    {
        return $this->container['borrow_amount'];
    }

    /**
     * Sets borrow_amount
     *
     * @param string $borrow_amount Borrowing amount.
     *
     * @return $this
     */
    public function setBorrowAmount($borrow_amount)
    {
        $this->container['borrow_amount'] = $borrow_amount;

        return $this;
    }

    /**
     * Gets borrow_currency
     *
     * @return string
     */
    public function getBorrowCurrency()
    {
        return $this->container['borrow_currency'];
    }

    /**
     * Sets borrow_currency
     *
     * @param string $borrow_currency Borrowed currency.
     *
     * @return $this
     */
    public function setBorrowCurrency($borrow_currency)
    {
        $this->container['borrow_currency'] = $borrow_currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


