<?php
/**
 * MockRiskUnit
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * MockRiskUnit Class Doc Comment
 *
 * @category Class
 * @description Risk unit
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class MockRiskUnit implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MockRiskUnit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'symbol' => 'string',
        'spot_in_use' => 'string',
        'maintain_margin' => 'string',
        'initial_margin' => 'string',
        'margin_result' => '\GateApi\Model\MockMarginResult[]',
        'delta' => 'string',
        'gamma' => 'string',
        'theta' => 'string',
        'vega' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'symbol' => null,
        'spot_in_use' => null,
        'maintain_margin' => null,
        'initial_margin' => null,
        'margin_result' => null,
        'delta' => null,
        'gamma' => null,
        'theta' => null,
        'vega' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol' => 'symbol',
        'spot_in_use' => 'spot_in_use',
        'maintain_margin' => 'maintain_margin',
        'initial_margin' => 'initial_margin',
        'margin_result' => 'margin_result',
        'delta' => 'delta',
        'gamma' => 'gamma',
        'theta' => 'theta',
        'vega' => 'vega'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol' => 'setSymbol',
        'spot_in_use' => 'setSpotInUse',
        'maintain_margin' => 'setMaintainMargin',
        'initial_margin' => 'setInitialMargin',
        'margin_result' => 'setMarginResult',
        'delta' => 'setDelta',
        'gamma' => 'setGamma',
        'theta' => 'setTheta',
        'vega' => 'setVega'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol' => 'getSymbol',
        'spot_in_use' => 'getSpotInUse',
        'maintain_margin' => 'getMaintainMargin',
        'initial_margin' => 'getInitialMargin',
        'margin_result' => 'getMarginResult',
        'delta' => 'getDelta',
        'gamma' => 'getGamma',
        'theta' => 'getTheta',
        'vega' => 'getVega'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['symbol'] = isset($data['symbol']) ? $data['symbol'] : null;
        $this->container['spot_in_use'] = isset($data['spot_in_use']) ? $data['spot_in_use'] : null;
        $this->container['maintain_margin'] = isset($data['maintain_margin']) ? $data['maintain_margin'] : null;
        $this->container['initial_margin'] = isset($data['initial_margin']) ? $data['initial_margin'] : null;
        $this->container['margin_result'] = isset($data['margin_result']) ? $data['margin_result'] : null;
        $this->container['delta'] = isset($data['delta']) ? $data['delta'] : null;
        $this->container['gamma'] = isset($data['gamma']) ? $data['gamma'] : null;
        $this->container['theta'] = isset($data['theta']) ? $data['theta'] : null;
        $this->container['vega'] = isset($data['vega']) ? $data['vega'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol Risk unit name
     *
     * @return $this
     */
    public function setSymbol($symbol)
    {
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets spot_in_use
     *
     * @return string|null
     */
    public function getSpotInUse()
    {
        return $this->container['spot_in_use'];
    }

    /**
     * Sets spot_in_use
     *
     * @param string|null $spot_in_use Spot usage
     *
     * @return $this
     */
    public function setSpotInUse($spot_in_use)
    {
        $this->container['spot_in_use'] = $spot_in_use;

        return $this;
    }

    /**
     * Gets maintain_margin
     *
     * @return string|null
     */
    public function getMaintainMargin()
    {
        return $this->container['maintain_margin'];
    }

    /**
     * Sets maintain_margin
     *
     * @param string|null $maintain_margin Maintenance margin
     *
     * @return $this
     */
    public function setMaintainMargin($maintain_margin)
    {
        $this->container['maintain_margin'] = $maintain_margin;

        return $this;
    }

    /**
     * Gets initial_margin
     *
     * @return string|null
     */
    public function getInitialMargin()
    {
        return $this->container['initial_margin'];
    }

    /**
     * Sets initial_margin
     *
     * @param string|null $initial_margin Initial margin
     *
     * @return $this
     */
    public function setInitialMargin($initial_margin)
    {
        $this->container['initial_margin'] = $initial_margin;

        return $this;
    }

    /**
     * Gets margin_result
     *
     * @return \GateApi\Model\MockMarginResult[]|null
     */
    public function getMarginResult()
    {
        return $this->container['margin_result'];
    }

    /**
     * Sets margin_result
     *
     * @param \GateApi\Model\MockMarginResult[]|null $margin_result Margin result
     *
     * @return $this
     */
    public function setMarginResult($margin_result)
    {
        $this->container['margin_result'] = $margin_result;

        return $this;
    }

    /**
     * Gets delta
     *
     * @return string|null
     */
    public function getDelta()
    {
        return $this->container['delta'];
    }

    /**
     * Sets delta
     *
     * @param string|null $delta Total Delta of risk unit
     *
     * @return $this
     */
    public function setDelta($delta)
    {
        $this->container['delta'] = $delta;

        return $this;
    }

    /**
     * Gets gamma
     *
     * @return string|null
     */
    public function getGamma()
    {
        return $this->container['gamma'];
    }

    /**
     * Sets gamma
     *
     * @param string|null $gamma Total Gamma of risk unit
     *
     * @return $this
     */
    public function setGamma($gamma)
    {
        $this->container['gamma'] = $gamma;

        return $this;
    }

    /**
     * Gets theta
     *
     * @return string|null
     */
    public function getTheta()
    {
        return $this->container['theta'];
    }

    /**
     * Sets theta
     *
     * @param string|null $theta Total Theta of risk unit
     *
     * @return $this
     */
    public function setTheta($theta)
    {
        $this->container['theta'] = $theta;

        return $this;
    }

    /**
     * Gets vega
     *
     * @return string|null
     */
    public function getVega()
    {
        return $this->container['vega'];
    }

    /**
     * Sets vega
     *
     * @param string|null $vega Total Vega of risk unit
     *
     * @return $this
     */
    public function setVega($vega)
    {
        $this->container['vega'] = $vega;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


