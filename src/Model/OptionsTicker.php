<?php
/**
 * OptionsTicker
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * OptionsTicker Class Doc Comment
 *
 * @category Class
 * @description Options contract detail.
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class OptionsTicker implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OptionsTicker';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'last_price' => 'string',
        'mark_price' => 'string',
        'index_price' => 'string',
        'ask1_size' => 'int',
        'ask1_price' => 'string',
        'bid1_size' => 'int',
        'bid1_price' => 'string',
        'position_size' => 'int',
        'mark_iv' => 'string',
        'bid_iv' => 'string',
        'ask_iv' => 'string',
        'leverage' => 'string',
        'delta' => 'string',
        'gamma' => 'string',
        'vega' => 'string',
        'theta' => 'string',
        'rho' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'last_price' => null,
        'mark_price' => null,
        'index_price' => null,
        'ask1_size' => 'int64',
        'ask1_price' => null,
        'bid1_size' => 'int64',
        'bid1_price' => null,
        'position_size' => 'int64',
        'mark_iv' => null,
        'bid_iv' => null,
        'ask_iv' => null,
        'leverage' => null,
        'delta' => null,
        'gamma' => null,
        'vega' => null,
        'theta' => null,
        'rho' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'last_price' => 'last_price',
        'mark_price' => 'mark_price',
        'index_price' => 'index_price',
        'ask1_size' => 'ask1_size',
        'ask1_price' => 'ask1_price',
        'bid1_size' => 'bid1_size',
        'bid1_price' => 'bid1_price',
        'position_size' => 'position_size',
        'mark_iv' => 'mark_iv',
        'bid_iv' => 'bid_iv',
        'ask_iv' => 'ask_iv',
        'leverage' => 'leverage',
        'delta' => 'delta',
        'gamma' => 'gamma',
        'vega' => 'vega',
        'theta' => 'theta',
        'rho' => 'rho'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'last_price' => 'setLastPrice',
        'mark_price' => 'setMarkPrice',
        'index_price' => 'setIndexPrice',
        'ask1_size' => 'setAsk1Size',
        'ask1_price' => 'setAsk1Price',
        'bid1_size' => 'setBid1Size',
        'bid1_price' => 'setBid1Price',
        'position_size' => 'setPositionSize',
        'mark_iv' => 'setMarkIv',
        'bid_iv' => 'setBidIv',
        'ask_iv' => 'setAskIv',
        'leverage' => 'setLeverage',
        'delta' => 'setDelta',
        'gamma' => 'setGamma',
        'vega' => 'setVega',
        'theta' => 'setTheta',
        'rho' => 'setRho'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'last_price' => 'getLastPrice',
        'mark_price' => 'getMarkPrice',
        'index_price' => 'getIndexPrice',
        'ask1_size' => 'getAsk1Size',
        'ask1_price' => 'getAsk1Price',
        'bid1_size' => 'getBid1Size',
        'bid1_price' => 'getBid1Price',
        'position_size' => 'getPositionSize',
        'mark_iv' => 'getMarkIv',
        'bid_iv' => 'getBidIv',
        'ask_iv' => 'getAskIv',
        'leverage' => 'getLeverage',
        'delta' => 'getDelta',
        'gamma' => 'getGamma',
        'vega' => 'getVega',
        'theta' => 'getTheta',
        'rho' => 'getRho'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['last_price'] = isset($data['last_price']) ? $data['last_price'] : null;
        $this->container['mark_price'] = isset($data['mark_price']) ? $data['mark_price'] : null;
        $this->container['index_price'] = isset($data['index_price']) ? $data['index_price'] : null;
        $this->container['ask1_size'] = isset($data['ask1_size']) ? $data['ask1_size'] : null;
        $this->container['ask1_price'] = isset($data['ask1_price']) ? $data['ask1_price'] : null;
        $this->container['bid1_size'] = isset($data['bid1_size']) ? $data['bid1_size'] : null;
        $this->container['bid1_price'] = isset($data['bid1_price']) ? $data['bid1_price'] : null;
        $this->container['position_size'] = isset($data['position_size']) ? $data['position_size'] : null;
        $this->container['mark_iv'] = isset($data['mark_iv']) ? $data['mark_iv'] : null;
        $this->container['bid_iv'] = isset($data['bid_iv']) ? $data['bid_iv'] : null;
        $this->container['ask_iv'] = isset($data['ask_iv']) ? $data['ask_iv'] : null;
        $this->container['leverage'] = isset($data['leverage']) ? $data['leverage'] : null;
        $this->container['delta'] = isset($data['delta']) ? $data['delta'] : null;
        $this->container['gamma'] = isset($data['gamma']) ? $data['gamma'] : null;
        $this->container['vega'] = isset($data['vega']) ? $data['vega'] : null;
        $this->container['theta'] = isset($data['theta']) ? $data['theta'] : null;
        $this->container['rho'] = isset($data['rho']) ? $data['rho'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Options contract name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets last_price
     *
     * @return string|null
     */
    public function getLastPrice()
    {
        return $this->container['last_price'];
    }

    /**
     * Sets last_price
     *
     * @param string|null $last_price Last trading price (quote currency).
     *
     * @return $this
     */
    public function setLastPrice($last_price)
    {
        $this->container['last_price'] = $last_price;

        return $this;
    }

    /**
     * Gets mark_price
     *
     * @return string|null
     */
    public function getMarkPrice()
    {
        return $this->container['mark_price'];
    }

    /**
     * Sets mark_price
     *
     * @param string|null $mark_price Current mark price (quote currency).
     *
     * @return $this
     */
    public function setMarkPrice($mark_price)
    {
        $this->container['mark_price'] = $mark_price;

        return $this;
    }

    /**
     * Gets index_price
     *
     * @return string|null
     */
    public function getIndexPrice()
    {
        return $this->container['index_price'];
    }

    /**
     * Sets index_price
     *
     * @param string|null $index_price Current index price (quote currency).
     *
     * @return $this
     */
    public function setIndexPrice($index_price)
    {
        $this->container['index_price'] = $index_price;

        return $this;
    }

    /**
     * Gets ask1_size
     *
     * @return int|null
     */
    public function getAsk1Size()
    {
        return $this->container['ask1_size'];
    }

    /**
     * Sets ask1_size
     *
     * @param int|null $ask1_size Best ask size.
     *
     * @return $this
     */
    public function setAsk1Size($ask1_size)
    {
        $this->container['ask1_size'] = $ask1_size;

        return $this;
    }

    /**
     * Gets ask1_price
     *
     * @return string|null
     */
    public function getAsk1Price()
    {
        return $this->container['ask1_price'];
    }

    /**
     * Sets ask1_price
     *
     * @param string|null $ask1_price Best ask price.
     *
     * @return $this
     */
    public function setAsk1Price($ask1_price)
    {
        $this->container['ask1_price'] = $ask1_price;

        return $this;
    }

    /**
     * Gets bid1_size
     *
     * @return int|null
     */
    public function getBid1Size()
    {
        return $this->container['bid1_size'];
    }

    /**
     * Sets bid1_size
     *
     * @param int|null $bid1_size Best bid size.
     *
     * @return $this
     */
    public function setBid1Size($bid1_size)
    {
        $this->container['bid1_size'] = $bid1_size;

        return $this;
    }

    /**
     * Gets bid1_price
     *
     * @return string|null
     */
    public function getBid1Price()
    {
        return $this->container['bid1_price'];
    }

    /**
     * Sets bid1_price
     *
     * @param string|null $bid1_price Best bid price.
     *
     * @return $this
     */
    public function setBid1Price($bid1_price)
    {
        $this->container['bid1_price'] = $bid1_price;

        return $this;
    }

    /**
     * Gets position_size
     *
     * @return int|null
     */
    public function getPositionSize()
    {
        return $this->container['position_size'];
    }

    /**
     * Sets position_size
     *
     * @param int|null $position_size Current total long position size.
     *
     * @return $this
     */
    public function setPositionSize($position_size)
    {
        $this->container['position_size'] = $position_size;

        return $this;
    }

    /**
     * Gets mark_iv
     *
     * @return string|null
     */
    public function getMarkIv()
    {
        return $this->container['mark_iv'];
    }

    /**
     * Sets mark_iv
     *
     * @param string|null $mark_iv Implied volatility.
     *
     * @return $this
     */
    public function setMarkIv($mark_iv)
    {
        $this->container['mark_iv'] = $mark_iv;

        return $this;
    }

    /**
     * Gets bid_iv
     *
     * @return string|null
     */
    public function getBidIv()
    {
        return $this->container['bid_iv'];
    }

    /**
     * Sets bid_iv
     *
     * @param string|null $bid_iv Bid side implied volatility.
     *
     * @return $this
     */
    public function setBidIv($bid_iv)
    {
        $this->container['bid_iv'] = $bid_iv;

        return $this;
    }

    /**
     * Gets ask_iv
     *
     * @return string|null
     */
    public function getAskIv()
    {
        return $this->container['ask_iv'];
    }

    /**
     * Sets ask_iv
     *
     * @param string|null $ask_iv Ask side implied volatility.
     *
     * @return $this
     */
    public function setAskIv($ask_iv)
    {
        $this->container['ask_iv'] = $ask_iv;

        return $this;
    }

    /**
     * Gets leverage
     *
     * @return string|null
     */
    public function getLeverage()
    {
        return $this->container['leverage'];
    }

    /**
     * Sets leverage
     *
     * @param string|null $leverage Current leverage. Formula: underlying_price / mark_price * delta.
     *
     * @return $this
     */
    public function setLeverage($leverage)
    {
        $this->container['leverage'] = $leverage;

        return $this;
    }

    /**
     * Gets delta
     *
     * @return string|null
     */
    public function getDelta()
    {
        return $this->container['delta'];
    }

    /**
     * Sets delta
     *
     * @param string|null $delta Delta.
     *
     * @return $this
     */
    public function setDelta($delta)
    {
        $this->container['delta'] = $delta;

        return $this;
    }

    /**
     * Gets gamma
     *
     * @return string|null
     */
    public function getGamma()
    {
        return $this->container['gamma'];
    }

    /**
     * Sets gamma
     *
     * @param string|null $gamma Gamma.
     *
     * @return $this
     */
    public function setGamma($gamma)
    {
        $this->container['gamma'] = $gamma;

        return $this;
    }

    /**
     * Gets vega
     *
     * @return string|null
     */
    public function getVega()
    {
        return $this->container['vega'];
    }

    /**
     * Sets vega
     *
     * @param string|null $vega Vega.
     *
     * @return $this
     */
    public function setVega($vega)
    {
        $this->container['vega'] = $vega;

        return $this;
    }

    /**
     * Gets theta
     *
     * @return string|null
     */
    public function getTheta()
    {
        return $this->container['theta'];
    }

    /**
     * Sets theta
     *
     * @param string|null $theta Theta.
     *
     * @return $this
     */
    public function setTheta($theta)
    {
        $this->container['theta'] = $theta;

        return $this;
    }

    /**
     * Gets rho
     *
     * @return string|null
     */
    public function getRho()
    {
        return $this->container['rho'];
    }

    /**
     * Sets rho
     *
     * @param string|null $rho Rho.
     *
     * @return $this
     */
    public function setRho($rho)
    {
        $this->container['rho'] = $rho;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


