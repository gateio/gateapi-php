<?php
/**
 * CollateralOrder
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * CollateralOrder Class Doc Comment
 *
 * @category Class
 * @description Collateral order
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class CollateralOrder implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CollateralOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_id' => 'int',
        'collateral_currency' => 'string',
        'collateral_amount' => 'string',
        'borrow_currency' => 'string',
        'borrow_amount' => 'string',
        'repaid_amount' => 'string',
        'repaid_principal' => 'string',
        'repaid_interest' => 'string',
        'init_ltv' => 'string',
        'current_ltv' => 'string',
        'liquidate_ltv' => 'string',
        'status' => 'string',
        'borrow_time' => 'int',
        'left_repay_total' => 'string',
        'left_repay_principal' => 'string',
        'left_repay_interest' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'order_id' => 'int64',
        'collateral_currency' => null,
        'collateral_amount' => null,
        'borrow_currency' => null,
        'borrow_amount' => null,
        'repaid_amount' => null,
        'repaid_principal' => null,
        'repaid_interest' => null,
        'init_ltv' => null,
        'current_ltv' => null,
        'liquidate_ltv' => null,
        'status' => null,
        'borrow_time' => 'int64',
        'left_repay_total' => null,
        'left_repay_principal' => null,
        'left_repay_interest' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'order_id',
        'collateral_currency' => 'collateral_currency',
        'collateral_amount' => 'collateral_amount',
        'borrow_currency' => 'borrow_currency',
        'borrow_amount' => 'borrow_amount',
        'repaid_amount' => 'repaid_amount',
        'repaid_principal' => 'repaid_principal',
        'repaid_interest' => 'repaid_interest',
        'init_ltv' => 'init_ltv',
        'current_ltv' => 'current_ltv',
        'liquidate_ltv' => 'liquidate_ltv',
        'status' => 'status',
        'borrow_time' => 'borrow_time',
        'left_repay_total' => 'left_repay_total',
        'left_repay_principal' => 'left_repay_principal',
        'left_repay_interest' => 'left_repay_interest'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'collateral_currency' => 'setCollateralCurrency',
        'collateral_amount' => 'setCollateralAmount',
        'borrow_currency' => 'setBorrowCurrency',
        'borrow_amount' => 'setBorrowAmount',
        'repaid_amount' => 'setRepaidAmount',
        'repaid_principal' => 'setRepaidPrincipal',
        'repaid_interest' => 'setRepaidInterest',
        'init_ltv' => 'setInitLtv',
        'current_ltv' => 'setCurrentLtv',
        'liquidate_ltv' => 'setLiquidateLtv',
        'status' => 'setStatus',
        'borrow_time' => 'setBorrowTime',
        'left_repay_total' => 'setLeftRepayTotal',
        'left_repay_principal' => 'setLeftRepayPrincipal',
        'left_repay_interest' => 'setLeftRepayInterest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'collateral_currency' => 'getCollateralCurrency',
        'collateral_amount' => 'getCollateralAmount',
        'borrow_currency' => 'getBorrowCurrency',
        'borrow_amount' => 'getBorrowAmount',
        'repaid_amount' => 'getRepaidAmount',
        'repaid_principal' => 'getRepaidPrincipal',
        'repaid_interest' => 'getRepaidInterest',
        'init_ltv' => 'getInitLtv',
        'current_ltv' => 'getCurrentLtv',
        'liquidate_ltv' => 'getLiquidateLtv',
        'status' => 'getStatus',
        'borrow_time' => 'getBorrowTime',
        'left_repay_total' => 'getLeftRepayTotal',
        'left_repay_principal' => 'getLeftRepayPrincipal',
        'left_repay_interest' => 'getLeftRepayInterest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['collateral_currency'] = isset($data['collateral_currency']) ? $data['collateral_currency'] : null;
        $this->container['collateral_amount'] = isset($data['collateral_amount']) ? $data['collateral_amount'] : null;
        $this->container['borrow_currency'] = isset($data['borrow_currency']) ? $data['borrow_currency'] : null;
        $this->container['borrow_amount'] = isset($data['borrow_amount']) ? $data['borrow_amount'] : null;
        $this->container['repaid_amount'] = isset($data['repaid_amount']) ? $data['repaid_amount'] : null;
        $this->container['repaid_principal'] = isset($data['repaid_principal']) ? $data['repaid_principal'] : null;
        $this->container['repaid_interest'] = isset($data['repaid_interest']) ? $data['repaid_interest'] : null;
        $this->container['init_ltv'] = isset($data['init_ltv']) ? $data['init_ltv'] : null;
        $this->container['current_ltv'] = isset($data['current_ltv']) ? $data['current_ltv'] : null;
        $this->container['liquidate_ltv'] = isset($data['liquidate_ltv']) ? $data['liquidate_ltv'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['borrow_time'] = isset($data['borrow_time']) ? $data['borrow_time'] : null;
        $this->container['left_repay_total'] = isset($data['left_repay_total']) ? $data['left_repay_total'] : null;
        $this->container['left_repay_principal'] = isset($data['left_repay_principal']) ? $data['left_repay_principal'] : null;
        $this->container['left_repay_interest'] = isset($data['left_repay_interest']) ? $data['left_repay_interest'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return int|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int|null $order_id Order ID
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets collateral_currency
     *
     * @return string|null
     */
    public function getCollateralCurrency()
    {
        return $this->container['collateral_currency'];
    }

    /**
     * Sets collateral_currency
     *
     * @param string|null $collateral_currency Collateral currency
     *
     * @return $this
     */
    public function setCollateralCurrency($collateral_currency)
    {
        $this->container['collateral_currency'] = $collateral_currency;

        return $this;
    }

    /**
     * Gets collateral_amount
     *
     * @return string|null
     */
    public function getCollateralAmount()
    {
        return $this->container['collateral_amount'];
    }

    /**
     * Sets collateral_amount
     *
     * @param string|null $collateral_amount Collateral amount
     *
     * @return $this
     */
    public function setCollateralAmount($collateral_amount)
    {
        $this->container['collateral_amount'] = $collateral_amount;

        return $this;
    }

    /**
     * Gets borrow_currency
     *
     * @return string|null
     */
    public function getBorrowCurrency()
    {
        return $this->container['borrow_currency'];
    }

    /**
     * Sets borrow_currency
     *
     * @param string|null $borrow_currency Borrowed currency
     *
     * @return $this
     */
    public function setBorrowCurrency($borrow_currency)
    {
        $this->container['borrow_currency'] = $borrow_currency;

        return $this;
    }

    /**
     * Gets borrow_amount
     *
     * @return string|null
     */
    public function getBorrowAmount()
    {
        return $this->container['borrow_amount'];
    }

    /**
     * Sets borrow_amount
     *
     * @param string|null $borrow_amount Borrowed amount
     *
     * @return $this
     */
    public function setBorrowAmount($borrow_amount)
    {
        $this->container['borrow_amount'] = $borrow_amount;

        return $this;
    }

    /**
     * Gets repaid_amount
     *
     * @return string|null
     */
    public function getRepaidAmount()
    {
        return $this->container['repaid_amount'];
    }

    /**
     * Sets repaid_amount
     *
     * @param string|null $repaid_amount Repaid amount
     *
     * @return $this
     */
    public function setRepaidAmount($repaid_amount)
    {
        $this->container['repaid_amount'] = $repaid_amount;

        return $this;
    }

    /**
     * Gets repaid_principal
     *
     * @return string|null
     */
    public function getRepaidPrincipal()
    {
        return $this->container['repaid_principal'];
    }

    /**
     * Sets repaid_principal
     *
     * @param string|null $repaid_principal Repaid principal
     *
     * @return $this
     */
    public function setRepaidPrincipal($repaid_principal)
    {
        $this->container['repaid_principal'] = $repaid_principal;

        return $this;
    }

    /**
     * Gets repaid_interest
     *
     * @return string|null
     */
    public function getRepaidInterest()
    {
        return $this->container['repaid_interest'];
    }

    /**
     * Sets repaid_interest
     *
     * @param string|null $repaid_interest Repaid interest
     *
     * @return $this
     */
    public function setRepaidInterest($repaid_interest)
    {
        $this->container['repaid_interest'] = $repaid_interest;

        return $this;
    }

    /**
     * Gets init_ltv
     *
     * @return string|null
     */
    public function getInitLtv()
    {
        return $this->container['init_ltv'];
    }

    /**
     * Sets init_ltv
     *
     * @param string|null $init_ltv Initial collateralization rate
     *
     * @return $this
     */
    public function setInitLtv($init_ltv)
    {
        $this->container['init_ltv'] = $init_ltv;

        return $this;
    }

    /**
     * Gets current_ltv
     *
     * @return string|null
     */
    public function getCurrentLtv()
    {
        return $this->container['current_ltv'];
    }

    /**
     * Sets current_ltv
     *
     * @param string|null $current_ltv Current collateralization rate
     *
     * @return $this
     */
    public function setCurrentLtv($current_ltv)
    {
        $this->container['current_ltv'] = $current_ltv;

        return $this;
    }

    /**
     * Gets liquidate_ltv
     *
     * @return string|null
     */
    public function getLiquidateLtv()
    {
        return $this->container['liquidate_ltv'];
    }

    /**
     * Sets liquidate_ltv
     *
     * @param string|null $liquidate_ltv Liquidation collateralization rate
     *
     * @return $this
     */
    public function setLiquidateLtv($liquidate_ltv)
    {
        $this->container['liquidate_ltv'] = $liquidate_ltv;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Order status: - initial: Initial state after placing the order - collateral_deducted: Collateral deduction successful - collateral_returning: Loan failed - Collateral return pending - lent: Loan successful - repaying: Repayment in progress - liquidating: Liquidation in progress - finished: Order completed - closed_liquidated: Liquidation and repayment completed
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets borrow_time
     *
     * @return int|null
     */
    public function getBorrowTime()
    {
        return $this->container['borrow_time'];
    }

    /**
     * Sets borrow_time
     *
     * @param int|null $borrow_time Borrowing time, timestamp in seconds
     *
     * @return $this
     */
    public function setBorrowTime($borrow_time)
    {
        $this->container['borrow_time'] = $borrow_time;

        return $this;
    }

    /**
     * Gets left_repay_total
     *
     * @return string|null
     */
    public function getLeftRepayTotal()
    {
        return $this->container['left_repay_total'];
    }

    /**
     * Sets left_repay_total
     *
     * @param string|null $left_repay_total Outstanding principal and interest (outstanding principal + outstanding interest)
     *
     * @return $this
     */
    public function setLeftRepayTotal($left_repay_total)
    {
        $this->container['left_repay_total'] = $left_repay_total;

        return $this;
    }

    /**
     * Gets left_repay_principal
     *
     * @return string|null
     */
    public function getLeftRepayPrincipal()
    {
        return $this->container['left_repay_principal'];
    }

    /**
     * Sets left_repay_principal
     *
     * @param string|null $left_repay_principal Outstanding principal
     *
     * @return $this
     */
    public function setLeftRepayPrincipal($left_repay_principal)
    {
        $this->container['left_repay_principal'] = $left_repay_principal;

        return $this;
    }

    /**
     * Gets left_repay_interest
     *
     * @return string|null
     */
    public function getLeftRepayInterest()
    {
        return $this->container['left_repay_interest'];
    }

    /**
     * Sets left_repay_interest
     *
     * @param string|null $left_repay_interest Outstanding interest
     *
     * @return $this
     */
    public function setLeftRepayInterest($left_repay_interest)
    {
        $this->container['left_repay_interest'] = $left_repay_interest;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


