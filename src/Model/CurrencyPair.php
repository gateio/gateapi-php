<?php
/**
 * CurrencyPair
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * CurrencyPair Class Doc Comment
 *
 * @category Class
 * @description Spot currency pair
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class CurrencyPair implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CurrencyPair';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'base' => 'string',
        'base_name' => 'string',
        'quote' => 'string',
        'quote_name' => 'string',
        'fee' => 'string',
        'min_base_amount' => 'string',
        'min_quote_amount' => 'string',
        'max_base_amount' => 'string',
        'max_quote_amount' => 'string',
        'amount_precision' => 'int',
        'precision' => 'int',
        'trade_status' => 'string',
        'sell_start' => 'int',
        'buy_start' => 'int',
        'delisting_time' => 'int',
        'type' => 'string',
        'trade_url' => 'string',
        'st_tag' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'base' => null,
        'base_name' => null,
        'quote' => null,
        'quote_name' => null,
        'fee' => null,
        'min_base_amount' => null,
        'min_quote_amount' => null,
        'max_base_amount' => null,
        'max_quote_amount' => null,
        'amount_precision' => null,
        'precision' => null,
        'trade_status' => null,
        'sell_start' => 'int64',
        'buy_start' => 'int64',
        'delisting_time' => 'int64',
        'type' => null,
        'trade_url' => null,
        'st_tag' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'base' => 'base',
        'base_name' => 'base_name',
        'quote' => 'quote',
        'quote_name' => 'quote_name',
        'fee' => 'fee',
        'min_base_amount' => 'min_base_amount',
        'min_quote_amount' => 'min_quote_amount',
        'max_base_amount' => 'max_base_amount',
        'max_quote_amount' => 'max_quote_amount',
        'amount_precision' => 'amount_precision',
        'precision' => 'precision',
        'trade_status' => 'trade_status',
        'sell_start' => 'sell_start',
        'buy_start' => 'buy_start',
        'delisting_time' => 'delisting_time',
        'type' => 'type',
        'trade_url' => 'trade_url',
        'st_tag' => 'st_tag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'base' => 'setBase',
        'base_name' => 'setBaseName',
        'quote' => 'setQuote',
        'quote_name' => 'setQuoteName',
        'fee' => 'setFee',
        'min_base_amount' => 'setMinBaseAmount',
        'min_quote_amount' => 'setMinQuoteAmount',
        'max_base_amount' => 'setMaxBaseAmount',
        'max_quote_amount' => 'setMaxQuoteAmount',
        'amount_precision' => 'setAmountPrecision',
        'precision' => 'setPrecision',
        'trade_status' => 'setTradeStatus',
        'sell_start' => 'setSellStart',
        'buy_start' => 'setBuyStart',
        'delisting_time' => 'setDelistingTime',
        'type' => 'setType',
        'trade_url' => 'setTradeUrl',
        'st_tag' => 'setStTag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'base' => 'getBase',
        'base_name' => 'getBaseName',
        'quote' => 'getQuote',
        'quote_name' => 'getQuoteName',
        'fee' => 'getFee',
        'min_base_amount' => 'getMinBaseAmount',
        'min_quote_amount' => 'getMinQuoteAmount',
        'max_base_amount' => 'getMaxBaseAmount',
        'max_quote_amount' => 'getMaxQuoteAmount',
        'amount_precision' => 'getAmountPrecision',
        'precision' => 'getPrecision',
        'trade_status' => 'getTradeStatus',
        'sell_start' => 'getSellStart',
        'buy_start' => 'getBuyStart',
        'delisting_time' => 'getDelistingTime',
        'type' => 'getType',
        'trade_url' => 'getTradeUrl',
        'st_tag' => 'getStTag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TRADE_STATUS_UNTRADABLE = 'untradable';
    const TRADE_STATUS_BUYABLE = 'buyable';
    const TRADE_STATUS_SELLABLE = 'sellable';
    const TRADE_STATUS_TRADABLE = 'tradable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTradeStatusAllowableValues()
    {
        return [
            self::TRADE_STATUS_UNTRADABLE,
            self::TRADE_STATUS_BUYABLE,
            self::TRADE_STATUS_SELLABLE,
            self::TRADE_STATUS_TRADABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['base'] = isset($data['base']) ? $data['base'] : null;
        $this->container['base_name'] = isset($data['base_name']) ? $data['base_name'] : null;
        $this->container['quote'] = isset($data['quote']) ? $data['quote'] : null;
        $this->container['quote_name'] = isset($data['quote_name']) ? $data['quote_name'] : null;
        $this->container['fee'] = isset($data['fee']) ? $data['fee'] : null;
        $this->container['min_base_amount'] = isset($data['min_base_amount']) ? $data['min_base_amount'] : null;
        $this->container['min_quote_amount'] = isset($data['min_quote_amount']) ? $data['min_quote_amount'] : null;
        $this->container['max_base_amount'] = isset($data['max_base_amount']) ? $data['max_base_amount'] : null;
        $this->container['max_quote_amount'] = isset($data['max_quote_amount']) ? $data['max_quote_amount'] : null;
        $this->container['amount_precision'] = isset($data['amount_precision']) ? $data['amount_precision'] : null;
        $this->container['precision'] = isset($data['precision']) ? $data['precision'] : null;
        $this->container['trade_status'] = isset($data['trade_status']) ? $data['trade_status'] : null;
        $this->container['sell_start'] = isset($data['sell_start']) ? $data['sell_start'] : null;
        $this->container['buy_start'] = isset($data['buy_start']) ? $data['buy_start'] : null;
        $this->container['delisting_time'] = isset($data['delisting_time']) ? $data['delisting_time'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['trade_url'] = isset($data['trade_url']) ? $data['trade_url'] : null;
        $this->container['st_tag'] = isset($data['st_tag']) ? $data['st_tag'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTradeStatusAllowableValues();
        if (!is_null($this->container['trade_status']) && !in_array($this->container['trade_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'trade_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Currency pair
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets base
     *
     * @return string|null
     */
    public function getBase()
    {
        return $this->container['base'];
    }

    /**
     * Sets base
     *
     * @param string|null $base Base currency
     *
     * @return $this
     */
    public function setBase($base)
    {
        $this->container['base'] = $base;

        return $this;
    }

    /**
     * Gets base_name
     *
     * @return string|null
     */
    public function getBaseName()
    {
        return $this->container['base_name'];
    }

    /**
     * Sets base_name
     *
     * @param string|null $base_name Base currency name
     *
     * @return $this
     */
    public function setBaseName($base_name)
    {
        $this->container['base_name'] = $base_name;

        return $this;
    }

    /**
     * Gets quote
     *
     * @return string|null
     */
    public function getQuote()
    {
        return $this->container['quote'];
    }

    /**
     * Sets quote
     *
     * @param string|null $quote Quote currency
     *
     * @return $this
     */
    public function setQuote($quote)
    {
        $this->container['quote'] = $quote;

        return $this;
    }

    /**
     * Gets quote_name
     *
     * @return string|null
     */
    public function getQuoteName()
    {
        return $this->container['quote_name'];
    }

    /**
     * Sets quote_name
     *
     * @param string|null $quote_name Quote currency name
     *
     * @return $this
     */
    public function setQuoteName($quote_name)
    {
        $this->container['quote_name'] = $quote_name;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return string|null
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param string|null $fee Trading fee rate
     *
     * @return $this
     */
    public function setFee($fee)
    {
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets min_base_amount
     *
     * @return string|null
     */
    public function getMinBaseAmount()
    {
        return $this->container['min_base_amount'];
    }

    /**
     * Sets min_base_amount
     *
     * @param string|null $min_base_amount Minimum amount of base currency to trade, `null` means no limit
     *
     * @return $this
     */
    public function setMinBaseAmount($min_base_amount)
    {
        $this->container['min_base_amount'] = $min_base_amount;

        return $this;
    }

    /**
     * Gets min_quote_amount
     *
     * @return string|null
     */
    public function getMinQuoteAmount()
    {
        return $this->container['min_quote_amount'];
    }

    /**
     * Sets min_quote_amount
     *
     * @param string|null $min_quote_amount Minimum amount of quote currency to trade, `null` means no limit
     *
     * @return $this
     */
    public function setMinQuoteAmount($min_quote_amount)
    {
        $this->container['min_quote_amount'] = $min_quote_amount;

        return $this;
    }

    /**
     * Gets max_base_amount
     *
     * @return string|null
     */
    public function getMaxBaseAmount()
    {
        return $this->container['max_base_amount'];
    }

    /**
     * Sets max_base_amount
     *
     * @param string|null $max_base_amount Maximum amount of base currency to trade, `null` means no limit
     *
     * @return $this
     */
    public function setMaxBaseAmount($max_base_amount)
    {
        $this->container['max_base_amount'] = $max_base_amount;

        return $this;
    }

    /**
     * Gets max_quote_amount
     *
     * @return string|null
     */
    public function getMaxQuoteAmount()
    {
        return $this->container['max_quote_amount'];
    }

    /**
     * Sets max_quote_amount
     *
     * @param string|null $max_quote_amount Maximum amount of quote currency to trade, `null` means no limit
     *
     * @return $this
     */
    public function setMaxQuoteAmount($max_quote_amount)
    {
        $this->container['max_quote_amount'] = $max_quote_amount;

        return $this;
    }

    /**
     * Gets amount_precision
     *
     * @return int|null
     */
    public function getAmountPrecision()
    {
        return $this->container['amount_precision'];
    }

    /**
     * Sets amount_precision
     *
     * @param int|null $amount_precision Amount scale
     *
     * @return $this
     */
    public function setAmountPrecision($amount_precision)
    {
        $this->container['amount_precision'] = $amount_precision;

        return $this;
    }

    /**
     * Gets precision
     *
     * @return int|null
     */
    public function getPrecision()
    {
        return $this->container['precision'];
    }

    /**
     * Sets precision
     *
     * @param int|null $precision Price scale
     *
     * @return $this
     */
    public function setPrecision($precision)
    {
        $this->container['precision'] = $precision;

        return $this;
    }

    /**
     * Gets trade_status
     *
     * @return string|null
     */
    public function getTradeStatus()
    {
        return $this->container['trade_status'];
    }

    /**
     * Sets trade_status
     *
     * @param string|null $trade_status Trading status  - untradable: cannot be traded - buyable: can be bought - sellable: can be sold - tradable: can be bought and sold
     *
     * @return $this
     */
    public function setTradeStatus($trade_status)
    {
        $allowedValues = $this->getTradeStatusAllowableValues();
        if (!is_null($trade_status) && !in_array($trade_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'trade_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trade_status'] = $trade_status;

        return $this;
    }

    /**
     * Gets sell_start
     *
     * @return int|null
     */
    public function getSellStart()
    {
        return $this->container['sell_start'];
    }

    /**
     * Sets sell_start
     *
     * @param int|null $sell_start Sell start unix timestamp in seconds
     *
     * @return $this
     */
    public function setSellStart($sell_start)
    {
        $this->container['sell_start'] = $sell_start;

        return $this;
    }

    /**
     * Gets buy_start
     *
     * @return int|null
     */
    public function getBuyStart()
    {
        return $this->container['buy_start'];
    }

    /**
     * Sets buy_start
     *
     * @param int|null $buy_start Buy start unix timestamp in seconds
     *
     * @return $this
     */
    public function setBuyStart($buy_start)
    {
        $this->container['buy_start'] = $buy_start;

        return $this;
    }

    /**
     * Gets delisting_time
     *
     * @return int|null
     */
    public function getDelistingTime()
    {
        return $this->container['delisting_time'];
    }

    /**
     * Sets delisting_time
     *
     * @param int|null $delisting_time Expected time to remove the shelves, Unix timestamp in seconds
     *
     * @return $this
     */
    public function setDelistingTime($delisting_time)
    {
        $this->container['delisting_time'] = $delisting_time;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Trading pair type, normal: normal, premarket: pre-market
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets trade_url
     *
     * @return string|null
     */
    public function getTradeUrl()
    {
        return $this->container['trade_url'];
    }

    /**
     * Sets trade_url
     *
     * @param string|null $trade_url Transaction link
     *
     * @return $this
     */
    public function setTradeUrl($trade_url)
    {
        $this->container['trade_url'] = $trade_url;

        return $this;
    }

    /**
     * Gets st_tag
     *
     * @return bool|null
     */
    public function getStTag()
    {
        return $this->container['st_tag'];
    }

    /**
     * Sets st_tag
     *
     * @param bool|null $st_tag Whether the trading pair is in ST risk assessment, false - No, true - Yes
     *
     * @return $this
     */
    public function setStTag($st_tag)
    {
        $this->container['st_tag'] = $st_tag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


