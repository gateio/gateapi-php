<?php
/**
 * QuoteResponse
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.io
 */

/**
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * QuoteResponse Class Doc Comment
 *
 * @category Class
 * @description Quotation Response
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.io
 */
class QuoteResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'QuoteResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'quote_id' => 'string',
        'min_amount' => 'string',
        'max_amount' => 'string',
        'price' => 'string',
        'slippage' => 'string',
        'estimate_gas_fee_amount_usdt' => 'string',
        'order_fee' => 'string',
        'target_token_min_amount' => 'string',
        'target_token_max_amount' => 'string',
        'error_type' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'quote_id' => null,
        'min_amount' => null,
        'max_amount' => null,
        'price' => null,
        'slippage' => null,
        'estimate_gas_fee_amount_usdt' => null,
        'order_fee' => null,
        'target_token_min_amount' => null,
        'target_token_max_amount' => null,
        'error_type' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'quote_id' => 'quote_id',
        'min_amount' => 'min_amount',
        'max_amount' => 'max_amount',
        'price' => 'price',
        'slippage' => 'slippage',
        'estimate_gas_fee_amount_usdt' => 'estimate_gas_fee_amount_usdt',
        'order_fee' => 'order_fee',
        'target_token_min_amount' => 'target_token_min_amount',
        'target_token_max_amount' => 'target_token_max_amount',
        'error_type' => 'error_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'quote_id' => 'setQuoteId',
        'min_amount' => 'setMinAmount',
        'max_amount' => 'setMaxAmount',
        'price' => 'setPrice',
        'slippage' => 'setSlippage',
        'estimate_gas_fee_amount_usdt' => 'setEstimateGasFeeAmountUsdt',
        'order_fee' => 'setOrderFee',
        'target_token_min_amount' => 'setTargetTokenMinAmount',
        'target_token_max_amount' => 'setTargetTokenMaxAmount',
        'error_type' => 'setErrorType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'quote_id' => 'getQuoteId',
        'min_amount' => 'getMinAmount',
        'max_amount' => 'getMaxAmount',
        'price' => 'getPrice',
        'slippage' => 'getSlippage',
        'estimate_gas_fee_amount_usdt' => 'getEstimateGasFeeAmountUsdt',
        'order_fee' => 'getOrderFee',
        'target_token_min_amount' => 'getTargetTokenMinAmount',
        'target_token_max_amount' => 'getTargetTokenMaxAmount',
        'error_type' => 'getErrorType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['quote_id'] = isset($data['quote_id']) ? $data['quote_id'] : null;
        $this->container['min_amount'] = isset($data['min_amount']) ? $data['min_amount'] : null;
        $this->container['max_amount'] = isset($data['max_amount']) ? $data['max_amount'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['slippage'] = isset($data['slippage']) ? $data['slippage'] : null;
        $this->container['estimate_gas_fee_amount_usdt'] = isset($data['estimate_gas_fee_amount_usdt']) ? $data['estimate_gas_fee_amount_usdt'] : null;
        $this->container['order_fee'] = isset($data['order_fee']) ? $data['order_fee'] : null;
        $this->container['target_token_min_amount'] = isset($data['target_token_min_amount']) ? $data['target_token_min_amount'] : null;
        $this->container['target_token_max_amount'] = isset($data['target_token_max_amount']) ? $data['target_token_max_amount'] : null;
        $this->container['error_type'] = isset($data['error_type']) ? $data['error_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets quote_id
     *
     * @return string|null
     */
    public function getQuoteId()
    {
        return $this->container['quote_id'];
    }

    /**
     * Sets quote_id
     *
     * @param string|null $quote_id The quotation ID (quote_id) is used for placing orders and is valid for 1 minute
     *
     * @return $this
     */
    public function setQuoteId($quote_id)
    {
        $this->container['quote_id'] = $quote_id;

        return $this;
    }

    /**
     * Gets min_amount
     *
     * @return string|null
     */
    public function getMinAmount()
    {
        return $this->container['min_amount'];
    }

    /**
     * Sets min_amount
     *
     * @param string|null $min_amount 最小下单量
     *
     * @return $this
     */
    public function setMinAmount($min_amount)
    {
        $this->container['min_amount'] = $min_amount;

        return $this;
    }

    /**
     * Gets max_amount
     *
     * @return string|null
     */
    public function getMaxAmount()
    {
        return $this->container['max_amount'];
    }

    /**
     * Sets max_amount
     *
     * @param string|null $max_amount 最大下单量
     *
     * @return $this
     */
    public function setMaxAmount($max_amount)
    {
        $this->container['max_amount'] = $max_amount;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string|null $price Coin Price (USDT-based)
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets slippage
     *
     * @return string|null
     */
    public function getSlippage()
    {
        return $this->container['slippage'];
    }

    /**
     * Sets slippage
     *
     * @param string|null $slippage Slippage
     *
     * @return $this
     */
    public function setSlippage($slippage)
    {
        $this->container['slippage'] = $slippage;

        return $this;
    }

    /**
     * Gets estimate_gas_fee_amount_usdt
     *
     * @return string|null
     */
    public function getEstimateGasFeeAmountUsdt()
    {
        return $this->container['estimate_gas_fee_amount_usdt'];
    }

    /**
     * Sets estimate_gas_fee_amount_usdt
     *
     * @param string|null $estimate_gas_fee_amount_usdt Estimated Network Fee (USDT-based)
     *
     * @return $this
     */
    public function setEstimateGasFeeAmountUsdt($estimate_gas_fee_amount_usdt)
    {
        $this->container['estimate_gas_fee_amount_usdt'] = $estimate_gas_fee_amount_usdt;

        return $this;
    }

    /**
     * Gets order_fee
     *
     * @return string|null
     */
    public function getOrderFee()
    {
        return $this->container['order_fee'];
    }

    /**
     * Sets order_fee
     *
     * @param string|null $order_fee Slippage value of 10 represents a 10% tolerance
     *
     * @return $this
     */
    public function setOrderFee($order_fee)
    {
        $this->container['order_fee'] = $order_fee;

        return $this;
    }

    /**
     * Gets target_token_min_amount
     *
     * @return string|null
     */
    public function getTargetTokenMinAmount()
    {
        return $this->container['target_token_min_amount'];
    }

    /**
     * Sets target_token_min_amount
     *
     * @param string|null $target_token_min_amount 最小获得数量
     *
     * @return $this
     */
    public function setTargetTokenMinAmount($target_token_min_amount)
    {
        $this->container['target_token_min_amount'] = $target_token_min_amount;

        return $this;
    }

    /**
     * Gets target_token_max_amount
     *
     * @return string|null
     */
    public function getTargetTokenMaxAmount()
    {
        return $this->container['target_token_max_amount'];
    }

    /**
     * Sets target_token_max_amount
     *
     * @param string|null $target_token_max_amount 最大获得数量
     *
     * @return $this
     */
    public function setTargetTokenMaxAmount($target_token_max_amount)
    {
        $this->container['target_token_max_amount'] = $target_token_max_amount;

        return $this;
    }

    /**
     * Gets error_type
     *
     * @return int|null
     */
    public function getErrorType()
    {
        return $this->container['error_type'];
    }

    /**
     * Sets error_type
     *
     * @param int|null $error_type Failure Type - `0` : Success - `1` : Exceeds maximum value - `2` : Below minimum value
     *
     * @return $this
     */
    public function setErrorType($error_type)
    {
        $this->container['error_type'] = $error_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


