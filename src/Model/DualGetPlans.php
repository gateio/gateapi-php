<?php
/**
 * DualGetPlans
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * DualGetPlans Class Doc Comment
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class DualGetPlans implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DualGetPlans';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'instrument_name' => 'string',
        'invest_currency' => 'string',
        'exercise_currency' => 'string',
        'exercise_price' => 'double',
        'delivery_time' => 'int',
        'min_copies' => 'int',
        'max_copies' => 'int',
        'per_value' => 'string',
        'apy_display' => 'string',
        'start_time' => 'int',
        'end_time' => 'int',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'instrument_name' => null,
        'invest_currency' => null,
        'exercise_currency' => null,
        'exercise_price' => 'double',
        'delivery_time' => 'int32',
        'min_copies' => 'int32',
        'max_copies' => 'int32',
        'per_value' => null,
        'apy_display' => null,
        'start_time' => 'int32',
        'end_time' => 'int32',
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'instrument_name' => 'instrument_name',
        'invest_currency' => 'invest_currency',
        'exercise_currency' => 'exercise_currency',
        'exercise_price' => 'exercise_price',
        'delivery_time' => 'delivery_time',
        'min_copies' => 'min_copies',
        'max_copies' => 'max_copies',
        'per_value' => 'per_value',
        'apy_display' => 'apy_display',
        'start_time' => 'start_time',
        'end_time' => 'end_time',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'instrument_name' => 'setInstrumentName',
        'invest_currency' => 'setInvestCurrency',
        'exercise_currency' => 'setExerciseCurrency',
        'exercise_price' => 'setExercisePrice',
        'delivery_time' => 'setDeliveryTime',
        'min_copies' => 'setMinCopies',
        'max_copies' => 'setMaxCopies',
        'per_value' => 'setPerValue',
        'apy_display' => 'setApyDisplay',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'instrument_name' => 'getInstrumentName',
        'invest_currency' => 'getInvestCurrency',
        'exercise_currency' => 'getExerciseCurrency',
        'exercise_price' => 'getExercisePrice',
        'delivery_time' => 'getDeliveryTime',
        'min_copies' => 'getMinCopies',
        'max_copies' => 'getMaxCopies',
        'per_value' => 'getPerValue',
        'apy_display' => 'getApyDisplay',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['instrument_name'] = isset($data['instrument_name']) ? $data['instrument_name'] : null;
        $this->container['invest_currency'] = isset($data['invest_currency']) ? $data['invest_currency'] : null;
        $this->container['exercise_currency'] = isset($data['exercise_currency']) ? $data['exercise_currency'] : null;
        $this->container['exercise_price'] = isset($data['exercise_price']) ? $data['exercise_price'] : null;
        $this->container['delivery_time'] = isset($data['delivery_time']) ? $data['delivery_time'] : null;
        $this->container['min_copies'] = isset($data['min_copies']) ? $data['min_copies'] : null;
        $this->container['max_copies'] = isset($data['max_copies']) ? $data['max_copies'] : null;
        $this->container['per_value'] = isset($data['per_value']) ? $data['per_value'] : null;
        $this->container['apy_display'] = isset($data['apy_display']) ? $data['apy_display'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Plan ID.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets instrument_name
     *
     * @return string|null
     */
    public function getInstrumentName()
    {
        return $this->container['instrument_name'];
    }

    /**
     * Sets instrument_name
     *
     * @param string|null $instrument_name Instrument Name.
     *
     * @return $this
     */
    public function setInstrumentName($instrument_name)
    {
        $this->container['instrument_name'] = $instrument_name;

        return $this;
    }

    /**
     * Gets invest_currency
     *
     * @return string|null
     */
    public function getInvestCurrency()
    {
        return $this->container['invest_currency'];
    }

    /**
     * Sets invest_currency
     *
     * @param string|null $invest_currency Investment Currency.
     *
     * @return $this
     */
    public function setInvestCurrency($invest_currency)
    {
        $this->container['invest_currency'] = $invest_currency;

        return $this;
    }

    /**
     * Gets exercise_currency
     *
     * @return string|null
     */
    public function getExerciseCurrency()
    {
        return $this->container['exercise_currency'];
    }

    /**
     * Sets exercise_currency
     *
     * @param string|null $exercise_currency Strike Currency.
     *
     * @return $this
     */
    public function setExerciseCurrency($exercise_currency)
    {
        $this->container['exercise_currency'] = $exercise_currency;

        return $this;
    }

    /**
     * Gets exercise_price
     *
     * @return double|null
     */
    public function getExercisePrice()
    {
        return $this->container['exercise_price'];
    }

    /**
     * Sets exercise_price
     *
     * @param double|null $exercise_price Strike price.
     *
     * @return $this
     */
    public function setExercisePrice($exercise_price)
    {
        $this->container['exercise_price'] = $exercise_price;

        return $this;
    }

    /**
     * Gets delivery_time
     *
     * @return int|null
     */
    public function getDeliveryTime()
    {
        return $this->container['delivery_time'];
    }

    /**
     * Sets delivery_time
     *
     * @param int|null $delivery_time Settlement time.
     *
     * @return $this
     */
    public function setDeliveryTime($delivery_time)
    {
        $this->container['delivery_time'] = $delivery_time;

        return $this;
    }

    /**
     * Gets min_copies
     *
     * @return int|null
     */
    public function getMinCopies()
    {
        return $this->container['min_copies'];
    }

    /**
     * Sets min_copies
     *
     * @param int|null $min_copies Minimum Copies.
     *
     * @return $this
     */
    public function setMinCopies($min_copies)
    {
        $this->container['min_copies'] = $min_copies;

        return $this;
    }

    /**
     * Gets max_copies
     *
     * @return int|null
     */
    public function getMaxCopies()
    {
        return $this->container['max_copies'];
    }

    /**
     * Sets max_copies
     *
     * @param int|null $max_copies Maximum Copies.
     *
     * @return $this
     */
    public function setMaxCopies($max_copies)
    {
        $this->container['max_copies'] = $max_copies;

        return $this;
    }

    /**
     * Gets per_value
     *
     * @return string|null
     */
    public function getPerValue()
    {
        return $this->container['per_value'];
    }

    /**
     * Sets per_value
     *
     * @param string|null $per_value Per Unit Value.
     *
     * @return $this
     */
    public function setPerValue($per_value)
    {
        $this->container['per_value'] = $per_value;

        return $this;
    }

    /**
     * Gets apy_display
     *
     * @return string|null
     */
    public function getApyDisplay()
    {
        return $this->container['apy_display'];
    }

    /**
     * Sets apy_display
     *
     * @param string|null $apy_display APY.
     *
     * @return $this
     */
    public function setApyDisplay($apy_display)
    {
        $this->container['apy_display'] = $apy_display;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return int|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param int|null $start_time start time.
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return int|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param int|null $end_time Finished time.
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status:   `NOTSTARTED`-not started  `ONGOING`-ongoing  `ENDED`-ended
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


