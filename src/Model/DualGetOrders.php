<?php
/**
 * DualGetOrders
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * DualGetOrders Class Doc Comment
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class DualGetOrders implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DualGetOrders';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'plan_id' => 'int',
        'copies' => 'string',
        'invest_amount' => 'string',
        'settlement_amount' => 'string',
        'create_time' => 'int',
        'complete_time' => 'int',
        'status' => 'string',
        'invest_currency' => 'string',
        'exercise_currency' => 'string',
        'exercise_price' => 'string',
        'settlement_price' => 'string',
        'settlement_currency' => 'string',
        'apy_display' => 'string',
        'apy_settlement' => 'string',
        'delivery_time' => 'int',
        'text' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'plan_id' => 'int32',
        'copies' => null,
        'invest_amount' => null,
        'settlement_amount' => null,
        'create_time' => 'int32',
        'complete_time' => 'int32',
        'status' => null,
        'invest_currency' => null,
        'exercise_currency' => null,
        'exercise_price' => null,
        'settlement_price' => null,
        'settlement_currency' => null,
        'apy_display' => null,
        'apy_settlement' => null,
        'delivery_time' => 'int32',
        'text' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'plan_id' => 'plan_id',
        'copies' => 'copies',
        'invest_amount' => 'invest_amount',
        'settlement_amount' => 'settlement_amount',
        'create_time' => 'create_time',
        'complete_time' => 'complete_time',
        'status' => 'status',
        'invest_currency' => 'invest_currency',
        'exercise_currency' => 'exercise_currency',
        'exercise_price' => 'exercise_price',
        'settlement_price' => 'settlement_price',
        'settlement_currency' => 'settlement_currency',
        'apy_display' => 'apy_display',
        'apy_settlement' => 'apy_settlement',
        'delivery_time' => 'delivery_time',
        'text' => 'text'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'plan_id' => 'setPlanId',
        'copies' => 'setCopies',
        'invest_amount' => 'setInvestAmount',
        'settlement_amount' => 'setSettlementAmount',
        'create_time' => 'setCreateTime',
        'complete_time' => 'setCompleteTime',
        'status' => 'setStatus',
        'invest_currency' => 'setInvestCurrency',
        'exercise_currency' => 'setExerciseCurrency',
        'exercise_price' => 'setExercisePrice',
        'settlement_price' => 'setSettlementPrice',
        'settlement_currency' => 'setSettlementCurrency',
        'apy_display' => 'setApyDisplay',
        'apy_settlement' => 'setApySettlement',
        'delivery_time' => 'setDeliveryTime',
        'text' => 'setText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'plan_id' => 'getPlanId',
        'copies' => 'getCopies',
        'invest_amount' => 'getInvestAmount',
        'settlement_amount' => 'getSettlementAmount',
        'create_time' => 'getCreateTime',
        'complete_time' => 'getCompleteTime',
        'status' => 'getStatus',
        'invest_currency' => 'getInvestCurrency',
        'exercise_currency' => 'getExerciseCurrency',
        'exercise_price' => 'getExercisePrice',
        'settlement_price' => 'getSettlementPrice',
        'settlement_currency' => 'getSettlementCurrency',
        'apy_display' => 'getApyDisplay',
        'apy_settlement' => 'getApySettlement',
        'delivery_time' => 'getDeliveryTime',
        'text' => 'getText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['plan_id'] = isset($data['plan_id']) ? $data['plan_id'] : null;
        $this->container['copies'] = isset($data['copies']) ? $data['copies'] : null;
        $this->container['invest_amount'] = isset($data['invest_amount']) ? $data['invest_amount'] : null;
        $this->container['settlement_amount'] = isset($data['settlement_amount']) ? $data['settlement_amount'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['complete_time'] = isset($data['complete_time']) ? $data['complete_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['invest_currency'] = isset($data['invest_currency']) ? $data['invest_currency'] : null;
        $this->container['exercise_currency'] = isset($data['exercise_currency']) ? $data['exercise_currency'] : null;
        $this->container['exercise_price'] = isset($data['exercise_price']) ? $data['exercise_price'] : null;
        $this->container['settlement_price'] = isset($data['settlement_price']) ? $data['settlement_price'] : null;
        $this->container['settlement_currency'] = isset($data['settlement_currency']) ? $data['settlement_currency'] : null;
        $this->container['apy_display'] = isset($data['apy_display']) ? $data['apy_display'] : null;
        $this->container['apy_settlement'] = isset($data['apy_settlement']) ? $data['apy_settlement'] : null;
        $this->container['delivery_time'] = isset($data['delivery_time']) ? $data['delivery_time'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Order ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets plan_id
     *
     * @return int|null
     */
    public function getPlanId()
    {
        return $this->container['plan_id'];
    }

    /**
     * Sets plan_id
     *
     * @param int|null $plan_id Plan ID
     *
     * @return $this
     */
    public function setPlanId($plan_id)
    {
        $this->container['plan_id'] = $plan_id;

        return $this;
    }

    /**
     * Gets copies
     *
     * @return string|null
     */
    public function getCopies()
    {
        return $this->container['copies'];
    }

    /**
     * Sets copies
     *
     * @param string|null $copies Copies
     *
     * @return $this
     */
    public function setCopies($copies)
    {
        $this->container['copies'] = $copies;

        return $this;
    }

    /**
     * Gets invest_amount
     *
     * @return string|null
     */
    public function getInvestAmount()
    {
        return $this->container['invest_amount'];
    }

    /**
     * Sets invest_amount
     *
     * @param string|null $invest_amount Investment Amount
     *
     * @return $this
     */
    public function setInvestAmount($invest_amount)
    {
        $this->container['invest_amount'] = $invest_amount;

        return $this;
    }

    /**
     * Gets settlement_amount
     *
     * @return string|null
     */
    public function getSettlementAmount()
    {
        return $this->container['settlement_amount'];
    }

    /**
     * Sets settlement_amount
     *
     * @param string|null $settlement_amount Settlement Amount
     *
     * @return $this
     */
    public function setSettlementAmount($settlement_amount)
    {
        $this->container['settlement_amount'] = $settlement_amount;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return int|null
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param int|null $create_time Creation time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets complete_time
     *
     * @return int|null
     */
    public function getCompleteTime()
    {
        return $this->container['complete_time'];
    }

    /**
     * Sets complete_time
     *
     * @param int|null $complete_time Completion Time
     *
     * @return $this
     */
    public function setCompleteTime($complete_time)
    {
        $this->container['complete_time'] = $complete_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status:  `INIT`-INIT `SETTLEMENT_SUCCESS`-Settlement Success `SETTLEMENT_PROCESSING`-SEttlement Processing `CANCELED`-Canceled `FAILED`-Failed
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets invest_currency
     *
     * @return string|null
     */
    public function getInvestCurrency()
    {
        return $this->container['invest_currency'];
    }

    /**
     * Sets invest_currency
     *
     * @param string|null $invest_currency Investment Currency
     *
     * @return $this
     */
    public function setInvestCurrency($invest_currency)
    {
        $this->container['invest_currency'] = $invest_currency;

        return $this;
    }

    /**
     * Gets exercise_currency
     *
     * @return string|null
     */
    public function getExerciseCurrency()
    {
        return $this->container['exercise_currency'];
    }

    /**
     * Sets exercise_currency
     *
     * @param string|null $exercise_currency Strike Currency
     *
     * @return $this
     */
    public function setExerciseCurrency($exercise_currency)
    {
        $this->container['exercise_currency'] = $exercise_currency;

        return $this;
    }

    /**
     * Gets exercise_price
     *
     * @return string|null
     */
    public function getExercisePrice()
    {
        return $this->container['exercise_price'];
    }

    /**
     * Sets exercise_price
     *
     * @param string|null $exercise_price Strike price
     *
     * @return $this
     */
    public function setExercisePrice($exercise_price)
    {
        $this->container['exercise_price'] = $exercise_price;

        return $this;
    }

    /**
     * Gets settlement_price
     *
     * @return string|null
     */
    public function getSettlementPrice()
    {
        return $this->container['settlement_price'];
    }

    /**
     * Sets settlement_price
     *
     * @param string|null $settlement_price settlement price
     *
     * @return $this
     */
    public function setSettlementPrice($settlement_price)
    {
        $this->container['settlement_price'] = $settlement_price;

        return $this;
    }

    /**
     * Gets settlement_currency
     *
     * @return string|null
     */
    public function getSettlementCurrency()
    {
        return $this->container['settlement_currency'];
    }

    /**
     * Sets settlement_currency
     *
     * @param string|null $settlement_currency Settle currency
     *
     * @return $this
     */
    public function setSettlementCurrency($settlement_currency)
    {
        $this->container['settlement_currency'] = $settlement_currency;

        return $this;
    }

    /**
     * Gets apy_display
     *
     * @return string|null
     */
    public function getApyDisplay()
    {
        return $this->container['apy_display'];
    }

    /**
     * Sets apy_display
     *
     * @param string|null $apy_display APY
     *
     * @return $this
     */
    public function setApyDisplay($apy_display)
    {
        $this->container['apy_display'] = $apy_display;

        return $this;
    }

    /**
     * Gets apy_settlement
     *
     * @return string|null
     */
    public function getApySettlement()
    {
        return $this->container['apy_settlement'];
    }

    /**
     * Sets apy_settlement
     *
     * @param string|null $apy_settlement Settlement APY
     *
     * @return $this
     */
    public function setApySettlement($apy_settlement)
    {
        $this->container['apy_settlement'] = $apy_settlement;

        return $this;
    }

    /**
     * Gets delivery_time
     *
     * @return int|null
     */
    public function getDeliveryTime()
    {
        return $this->container['delivery_time'];
    }

    /**
     * Sets delivery_time
     *
     * @param int|null $delivery_time Settlement time
     *
     * @return $this
     */
    public function setDeliveryTime($delivery_time)
    {
        $this->container['delivery_time'] = $delivery_time;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text Custom order information
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


