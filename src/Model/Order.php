<?php
/**
 * Order
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @description Spot order details
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class Order implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'text' => 'string',
        'amend_text' => 'string',
        'create_time' => 'string',
        'update_time' => 'string',
        'create_time_ms' => 'int',
        'update_time_ms' => 'int',
        'status' => 'string',
        'currency_pair' => 'string',
        'type' => 'string',
        'account' => 'string',
        'side' => 'string',
        'amount' => 'string',
        'price' => 'string',
        'time_in_force' => 'string',
        'iceberg' => 'string',
        'auto_borrow' => 'bool',
        'auto_repay' => 'bool',
        'left' => 'string',
        'filled_amount' => 'string',
        'fill_price' => 'string',
        'filled_total' => 'string',
        'avg_deal_price' => 'string',
        'fee' => 'string',
        'fee_currency' => 'string',
        'point_fee' => 'string',
        'gt_fee' => 'string',
        'gt_maker_fee' => 'string',
        'gt_taker_fee' => 'string',
        'gt_discount' => 'bool',
        'rebated_fee' => 'string',
        'rebated_fee_currency' => 'string',
        'stp_id' => 'int',
        'stp_act' => 'string',
        'finish_as' => 'string',
        'action_mode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'text' => null,
        'amend_text' => null,
        'create_time' => null,
        'update_time' => null,
        'create_time_ms' => 'int64',
        'update_time_ms' => 'int64',
        'status' => null,
        'currency_pair' => null,
        'type' => null,
        'account' => null,
        'side' => null,
        'amount' => null,
        'price' => null,
        'time_in_force' => null,
        'iceberg' => null,
        'auto_borrow' => null,
        'auto_repay' => null,
        'left' => null,
        'filled_amount' => null,
        'fill_price' => null,
        'filled_total' => null,
        'avg_deal_price' => null,
        'fee' => null,
        'fee_currency' => null,
        'point_fee' => null,
        'gt_fee' => null,
        'gt_maker_fee' => null,
        'gt_taker_fee' => null,
        'gt_discount' => null,
        'rebated_fee' => null,
        'rebated_fee_currency' => null,
        'stp_id' => null,
        'stp_act' => null,
        'finish_as' => null,
        'action_mode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'text' => 'text',
        'amend_text' => 'amend_text',
        'create_time' => 'create_time',
        'update_time' => 'update_time',
        'create_time_ms' => 'create_time_ms',
        'update_time_ms' => 'update_time_ms',
        'status' => 'status',
        'currency_pair' => 'currency_pair',
        'type' => 'type',
        'account' => 'account',
        'side' => 'side',
        'amount' => 'amount',
        'price' => 'price',
        'time_in_force' => 'time_in_force',
        'iceberg' => 'iceberg',
        'auto_borrow' => 'auto_borrow',
        'auto_repay' => 'auto_repay',
        'left' => 'left',
        'filled_amount' => 'filled_amount',
        'fill_price' => 'fill_price',
        'filled_total' => 'filled_total',
        'avg_deal_price' => 'avg_deal_price',
        'fee' => 'fee',
        'fee_currency' => 'fee_currency',
        'point_fee' => 'point_fee',
        'gt_fee' => 'gt_fee',
        'gt_maker_fee' => 'gt_maker_fee',
        'gt_taker_fee' => 'gt_taker_fee',
        'gt_discount' => 'gt_discount',
        'rebated_fee' => 'rebated_fee',
        'rebated_fee_currency' => 'rebated_fee_currency',
        'stp_id' => 'stp_id',
        'stp_act' => 'stp_act',
        'finish_as' => 'finish_as',
        'action_mode' => 'action_mode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'text' => 'setText',
        'amend_text' => 'setAmendText',
        'create_time' => 'setCreateTime',
        'update_time' => 'setUpdateTime',
        'create_time_ms' => 'setCreateTimeMs',
        'update_time_ms' => 'setUpdateTimeMs',
        'status' => 'setStatus',
        'currency_pair' => 'setCurrencyPair',
        'type' => 'setType',
        'account' => 'setAccount',
        'side' => 'setSide',
        'amount' => 'setAmount',
        'price' => 'setPrice',
        'time_in_force' => 'setTimeInForce',
        'iceberg' => 'setIceberg',
        'auto_borrow' => 'setAutoBorrow',
        'auto_repay' => 'setAutoRepay',
        'left' => 'setLeft',
        'filled_amount' => 'setFilledAmount',
        'fill_price' => 'setFillPrice',
        'filled_total' => 'setFilledTotal',
        'avg_deal_price' => 'setAvgDealPrice',
        'fee' => 'setFee',
        'fee_currency' => 'setFeeCurrency',
        'point_fee' => 'setPointFee',
        'gt_fee' => 'setGtFee',
        'gt_maker_fee' => 'setGtMakerFee',
        'gt_taker_fee' => 'setGtTakerFee',
        'gt_discount' => 'setGtDiscount',
        'rebated_fee' => 'setRebatedFee',
        'rebated_fee_currency' => 'setRebatedFeeCurrency',
        'stp_id' => 'setStpId',
        'stp_act' => 'setStpAct',
        'finish_as' => 'setFinishAs',
        'action_mode' => 'setActionMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'text' => 'getText',
        'amend_text' => 'getAmendText',
        'create_time' => 'getCreateTime',
        'update_time' => 'getUpdateTime',
        'create_time_ms' => 'getCreateTimeMs',
        'update_time_ms' => 'getUpdateTimeMs',
        'status' => 'getStatus',
        'currency_pair' => 'getCurrencyPair',
        'type' => 'getType',
        'account' => 'getAccount',
        'side' => 'getSide',
        'amount' => 'getAmount',
        'price' => 'getPrice',
        'time_in_force' => 'getTimeInForce',
        'iceberg' => 'getIceberg',
        'auto_borrow' => 'getAutoBorrow',
        'auto_repay' => 'getAutoRepay',
        'left' => 'getLeft',
        'filled_amount' => 'getFilledAmount',
        'fill_price' => 'getFillPrice',
        'filled_total' => 'getFilledTotal',
        'avg_deal_price' => 'getAvgDealPrice',
        'fee' => 'getFee',
        'fee_currency' => 'getFeeCurrency',
        'point_fee' => 'getPointFee',
        'gt_fee' => 'getGtFee',
        'gt_maker_fee' => 'getGtMakerFee',
        'gt_taker_fee' => 'getGtTakerFee',
        'gt_discount' => 'getGtDiscount',
        'rebated_fee' => 'getRebatedFee',
        'rebated_fee_currency' => 'getRebatedFeeCurrency',
        'stp_id' => 'getStpId',
        'stp_act' => 'getStpAct',
        'finish_as' => 'getFinishAs',
        'action_mode' => 'getActionMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_OPEN = 'open';
    const STATUS_CLOSED = 'closed';
    const STATUS_CANCELLED = 'cancelled';
    const TYPE_LIMIT = 'limit';
    const TYPE_MARKET = 'market';
    const SIDE_BUY = 'buy';
    const SIDE_SELL = 'sell';
    const TIME_IN_FORCE_GTC = 'gtc';
    const TIME_IN_FORCE_IOC = 'ioc';
    const TIME_IN_FORCE_POC = 'poc';
    const TIME_IN_FORCE_FOK = 'fok';
    const STP_ACT_CN = 'cn';
    const STP_ACT_CO = 'co';
    const STP_ACT_CB = 'cb';
    const STP_ACT_MINUS = '-';
    const FINISH_AS_OPEN = 'open';
    const FINISH_AS_FILLED = 'filled';
    const FINISH_AS_CANCELLED = 'cancelled';
    const FINISH_AS_LIQUIDATE_CANCELLED = 'liquidate_cancelled';
    const FINISH_AS_DEPTH_NOT_ENOUGH = 'depth_not_enough';
    const FINISH_AS_TRADER_NOT_ENOUGH = 'trader_not_enough';
    const FINISH_AS_SMALL = 'small';
    const FINISH_AS_IOC = 'ioc';
    const FINISH_AS_POC = 'poc';
    const FINISH_AS_FOK = 'fok';
    const FINISH_AS_STP = 'stp';
    const FINISH_AS_UNKNOWN = 'unknown';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_OPEN,
            self::STATUS_CLOSED,
            self::STATUS_CANCELLED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_LIMIT,
            self::TYPE_MARKET,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSideAllowableValues()
    {
        return [
            self::SIDE_BUY,
            self::SIDE_SELL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimeInForceAllowableValues()
    {
        return [
            self::TIME_IN_FORCE_GTC,
            self::TIME_IN_FORCE_IOC,
            self::TIME_IN_FORCE_POC,
            self::TIME_IN_FORCE_FOK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStpActAllowableValues()
    {
        return [
            self::STP_ACT_CN,
            self::STP_ACT_CO,
            self::STP_ACT_CB,
            self::STP_ACT_MINUS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFinishAsAllowableValues()
    {
        return [
            self::FINISH_AS_OPEN,
            self::FINISH_AS_FILLED,
            self::FINISH_AS_CANCELLED,
            self::FINISH_AS_LIQUIDATE_CANCELLED,
            self::FINISH_AS_DEPTH_NOT_ENOUGH,
            self::FINISH_AS_TRADER_NOT_ENOUGH,
            self::FINISH_AS_SMALL,
            self::FINISH_AS_IOC,
            self::FINISH_AS_POC,
            self::FINISH_AS_FOK,
            self::FINISH_AS_STP,
            self::FINISH_AS_UNKNOWN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['amend_text'] = isset($data['amend_text']) ? $data['amend_text'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
        $this->container['create_time_ms'] = isset($data['create_time_ms']) ? $data['create_time_ms'] : null;
        $this->container['update_time_ms'] = isset($data['update_time_ms']) ? $data['update_time_ms'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['currency_pair'] = isset($data['currency_pair']) ? $data['currency_pair'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : 'limit';
        $this->container['account'] = isset($data['account']) ? $data['account'] : 'spot';
        $this->container['side'] = isset($data['side']) ? $data['side'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['time_in_force'] = isset($data['time_in_force']) ? $data['time_in_force'] : 'gtc';
        $this->container['iceberg'] = isset($data['iceberg']) ? $data['iceberg'] : null;
        $this->container['auto_borrow'] = isset($data['auto_borrow']) ? $data['auto_borrow'] : null;
        $this->container['auto_repay'] = isset($data['auto_repay']) ? $data['auto_repay'] : null;
        $this->container['left'] = isset($data['left']) ? $data['left'] : null;
        $this->container['filled_amount'] = isset($data['filled_amount']) ? $data['filled_amount'] : null;
        $this->container['fill_price'] = isset($data['fill_price']) ? $data['fill_price'] : null;
        $this->container['filled_total'] = isset($data['filled_total']) ? $data['filled_total'] : null;
        $this->container['avg_deal_price'] = isset($data['avg_deal_price']) ? $data['avg_deal_price'] : null;
        $this->container['fee'] = isset($data['fee']) ? $data['fee'] : null;
        $this->container['fee_currency'] = isset($data['fee_currency']) ? $data['fee_currency'] : null;
        $this->container['point_fee'] = isset($data['point_fee']) ? $data['point_fee'] : null;
        $this->container['gt_fee'] = isset($data['gt_fee']) ? $data['gt_fee'] : null;
        $this->container['gt_maker_fee'] = isset($data['gt_maker_fee']) ? $data['gt_maker_fee'] : null;
        $this->container['gt_taker_fee'] = isset($data['gt_taker_fee']) ? $data['gt_taker_fee'] : null;
        $this->container['gt_discount'] = isset($data['gt_discount']) ? $data['gt_discount'] : null;
        $this->container['rebated_fee'] = isset($data['rebated_fee']) ? $data['rebated_fee'] : null;
        $this->container['rebated_fee_currency'] = isset($data['rebated_fee_currency']) ? $data['rebated_fee_currency'] : null;
        $this->container['stp_id'] = isset($data['stp_id']) ? $data['stp_id'] : null;
        $this->container['stp_act'] = isset($data['stp_act']) ? $data['stp_act'] : null;
        $this->container['finish_as'] = isset($data['finish_as']) ? $data['finish_as'] : null;
        $this->container['action_mode'] = isset($data['action_mode']) ? $data['action_mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['currency_pair'] === null) {
            $invalidProperties[] = "'currency_pair' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['side'] === null) {
            $invalidProperties[] = "'side' can't be null";
        }
        $allowedValues = $this->getSideAllowableValues();
        if (!is_null($this->container['side']) && !in_array($this->container['side'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'side', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        $allowedValues = $this->getTimeInForceAllowableValues();
        if (!is_null($this->container['time_in_force']) && !in_array($this->container['time_in_force'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'time_in_force', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStpActAllowableValues();
        if (!is_null($this->container['stp_act']) && !in_array($this->container['stp_act'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'stp_act', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFinishAsAllowableValues();
        if (!is_null($this->container['finish_as']) && !in_array($this->container['finish_as'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'finish_as', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Order ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text User defined information. If not empty, must follow the rules below:  1. prefixed with `t-` 2. no longer than 28 bytes without `t-` prefix 3. can only include 0-9, A-Z, a-z, underscore(_), hyphen(-) or dot(.)  Besides user defined information, reserved contents are listed below, denoting how the order is created:  - 101: from android - 102: from IOS - 103: from IPAD - 104: from webapp - 3: from web - 2: from apiv2 - apiv4: from apiv4
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets amend_text
     *
     * @return string|null
     */
    public function getAmendText()
    {
        return $this->container['amend_text'];
    }

    /**
     * Sets amend_text
     *
     * @param string|null $amend_text The custom data that the user remarked when amending the order
     *
     * @return $this
     */
    public function setAmendText($amend_text)
    {
        $this->container['amend_text'] = $amend_text;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string|null
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string|null $create_time Creation time of order
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string|null
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string|null $update_time Last modification time of order
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets create_time_ms
     *
     * @return int|null
     */
    public function getCreateTimeMs()
    {
        return $this->container['create_time_ms'];
    }

    /**
     * Sets create_time_ms
     *
     * @param int|null $create_time_ms Creation time of order (in milliseconds)
     *
     * @return $this
     */
    public function setCreateTimeMs($create_time_ms)
    {
        $this->container['create_time_ms'] = $create_time_ms;

        return $this;
    }

    /**
     * Gets update_time_ms
     *
     * @return int|null
     */
    public function getUpdateTimeMs()
    {
        return $this->container['update_time_ms'];
    }

    /**
     * Sets update_time_ms
     *
     * @param int|null $update_time_ms Last modification time of order (in milliseconds)
     *
     * @return $this
     */
    public function setUpdateTimeMs($update_time_ms)
    {
        $this->container['update_time_ms'] = $update_time_ms;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Order status  - `open`: to be filled - `closed`: filled - `cancelled`: cancelled
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets currency_pair
     *
     * @return string
     */
    public function getCurrencyPair()
    {
        return $this->container['currency_pair'];
    }

    /**
     * Sets currency_pair
     *
     * @param string $currency_pair Currency pair
     *
     * @return $this
     */
    public function setCurrencyPair($currency_pair)
    {
        $this->container['currency_pair'] = $currency_pair;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Order Type   - limit : Limit Order - market : Market Order
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets account
     *
     * @return string|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string|null $account Account type, spot - spot account, margin - leveraged account, unified - unified account
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets side
     *
     * @return string
     */
    public function getSide()
    {
        return $this->container['side'];
    }

    /**
     * Sets side
     *
     * @param string $side Buy or sell order
     *
     * @return $this
     */
    public function setSide($side)
    {
        $allowedValues = $this->getSideAllowableValues();
        if (!in_array($side, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'side', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['side'] = $side;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount When `type` is limit, it refers to base currency.  For instance, `BTC_USDT` means `BTC`  When `type` is `market`, it refers to different currency according to `side`  - `side` : `buy` means quote currency, `BTC_USDT` means `USDT` - `side` : `sell` means base currency，`BTC_USDT` means `BTC`
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string|null $price Price can't be empty when `type`= `limit`
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets time_in_force
     *
     * @return string|null
     */
    public function getTimeInForce()
    {
        return $this->container['time_in_force'];
    }

    /**
     * Sets time_in_force
     *
     * @param string|null $time_in_force Time in force  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled, taker only - poc: PendingOrCancelled, makes a post-only order that always enjoys a maker fee - fok: FillOrKill, fill either completely or none Only `ioc` and `fok` are supported when `type`=`market`
     *
     * @return $this
     */
    public function setTimeInForce($time_in_force)
    {
        $allowedValues = $this->getTimeInForceAllowableValues();
        if (!is_null($time_in_force) && !in_array($time_in_force, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'time_in_force', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['time_in_force'] = $time_in_force;

        return $this;
    }

    /**
     * Gets iceberg
     *
     * @return string|null
     */
    public function getIceberg()
    {
        return $this->container['iceberg'];
    }

    /**
     * Sets iceberg
     *
     * @param string|null $iceberg Amount to display for the iceberg order. Null or 0 for normal orders.  Hiding all amount is not supported.
     *
     * @return $this
     */
    public function setIceberg($iceberg)
    {
        $this->container['iceberg'] = $iceberg;

        return $this;
    }

    /**
     * Gets auto_borrow
     *
     * @return bool|null
     */
    public function getAutoBorrow()
    {
        return $this->container['auto_borrow'];
    }

    /**
     * Sets auto_borrow
     *
     * @param bool|null $auto_borrow Used in margin or cross margin trading to allow automatic loan of insufficient amount if balance is not enough.
     *
     * @return $this
     */
    public function setAutoBorrow($auto_borrow)
    {
        $this->container['auto_borrow'] = $auto_borrow;

        return $this;
    }

    /**
     * Gets auto_repay
     *
     * @return bool|null
     */
    public function getAutoRepay()
    {
        return $this->container['auto_repay'];
    }

    /**
     * Sets auto_repay
     *
     * @param bool|null $auto_repay Enable or disable automatic repayment for automatic borrow loan generated by cross margin order. Default is disabled. Note that:  1. This field is only effective for cross margin orders. Margin account does not support setting auto repayment for orders. 2. `auto_borrow` and `auto_repay` can be both set to true in one order.
     *
     * @return $this
     */
    public function setAutoRepay($auto_repay)
    {
        $this->container['auto_repay'] = $auto_repay;

        return $this;
    }

    /**
     * Gets left
     *
     * @return string|null
     */
    public function getLeft()
    {
        return $this->container['left'];
    }

    /**
     * Sets left
     *
     * @param string|null $left Amount left to fill
     *
     * @return $this
     */
    public function setLeft($left)
    {
        $this->container['left'] = $left;

        return $this;
    }

    /**
     * Gets filled_amount
     *
     * @return string|null
     */
    public function getFilledAmount()
    {
        return $this->container['filled_amount'];
    }

    /**
     * Sets filled_amount
     *
     * @param string|null $filled_amount Amount traded to fill
     *
     * @return $this
     */
    public function setFilledAmount($filled_amount)
    {
        $this->container['filled_amount'] = $filled_amount;

        return $this;
    }

    /**
     * Gets fill_price
     *
     * @return string|null
     */
    public function getFillPrice()
    {
        return $this->container['fill_price'];
    }

    /**
     * Sets fill_price
     *
     * @param string|null $fill_price Total filled in quote currency. Deprecated in favor of `filled_total`
     *
     * @return $this
     */
    public function setFillPrice($fill_price)
    {
        $this->container['fill_price'] = $fill_price;

        return $this;
    }

    /**
     * Gets filled_total
     *
     * @return string|null
     */
    public function getFilledTotal()
    {
        return $this->container['filled_total'];
    }

    /**
     * Sets filled_total
     *
     * @param string|null $filled_total Total filled in quote currency
     *
     * @return $this
     */
    public function setFilledTotal($filled_total)
    {
        $this->container['filled_total'] = $filled_total;

        return $this;
    }

    /**
     * Gets avg_deal_price
     *
     * @return string|null
     */
    public function getAvgDealPrice()
    {
        return $this->container['avg_deal_price'];
    }

    /**
     * Sets avg_deal_price
     *
     * @param string|null $avg_deal_price Average fill price
     *
     * @return $this
     */
    public function setAvgDealPrice($avg_deal_price)
    {
        $this->container['avg_deal_price'] = $avg_deal_price;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return string|null
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param string|null $fee Fee deducted
     *
     * @return $this
     */
    public function setFee($fee)
    {
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets fee_currency
     *
     * @return string|null
     */
    public function getFeeCurrency()
    {
        return $this->container['fee_currency'];
    }

    /**
     * Sets fee_currency
     *
     * @param string|null $fee_currency Fee currency unit
     *
     * @return $this
     */
    public function setFeeCurrency($fee_currency)
    {
        $this->container['fee_currency'] = $fee_currency;

        return $this;
    }

    /**
     * Gets point_fee
     *
     * @return string|null
     */
    public function getPointFee()
    {
        return $this->container['point_fee'];
    }

    /**
     * Sets point_fee
     *
     * @param string|null $point_fee Points used to deduct fee
     *
     * @return $this
     */
    public function setPointFee($point_fee)
    {
        $this->container['point_fee'] = $point_fee;

        return $this;
    }

    /**
     * Gets gt_fee
     *
     * @return string|null
     */
    public function getGtFee()
    {
        return $this->container['gt_fee'];
    }

    /**
     * Sets gt_fee
     *
     * @param string|null $gt_fee GT used to deduct fee
     *
     * @return $this
     */
    public function setGtFee($gt_fee)
    {
        $this->container['gt_fee'] = $gt_fee;

        return $this;
    }

    /**
     * Gets gt_maker_fee
     *
     * @return string|null
     */
    public function getGtMakerFee()
    {
        return $this->container['gt_maker_fee'];
    }

    /**
     * Sets gt_maker_fee
     *
     * @param string|null $gt_maker_fee GT used to deduct maker fee
     *
     * @return $this
     */
    public function setGtMakerFee($gt_maker_fee)
    {
        $this->container['gt_maker_fee'] = $gt_maker_fee;

        return $this;
    }

    /**
     * Gets gt_taker_fee
     *
     * @return string|null
     */
    public function getGtTakerFee()
    {
        return $this->container['gt_taker_fee'];
    }

    /**
     * Sets gt_taker_fee
     *
     * @param string|null $gt_taker_fee GT used to deduct taker fee
     *
     * @return $this
     */
    public function setGtTakerFee($gt_taker_fee)
    {
        $this->container['gt_taker_fee'] = $gt_taker_fee;

        return $this;
    }

    /**
     * Gets gt_discount
     *
     * @return bool|null
     */
    public function getGtDiscount()
    {
        return $this->container['gt_discount'];
    }

    /**
     * Sets gt_discount
     *
     * @param bool|null $gt_discount Whether GT fee discount is used
     *
     * @return $this
     */
    public function setGtDiscount($gt_discount)
    {
        $this->container['gt_discount'] = $gt_discount;

        return $this;
    }

    /**
     * Gets rebated_fee
     *
     * @return string|null
     */
    public function getRebatedFee()
    {
        return $this->container['rebated_fee'];
    }

    /**
     * Sets rebated_fee
     *
     * @param string|null $rebated_fee Rebated fee
     *
     * @return $this
     */
    public function setRebatedFee($rebated_fee)
    {
        $this->container['rebated_fee'] = $rebated_fee;

        return $this;
    }

    /**
     * Gets rebated_fee_currency
     *
     * @return string|null
     */
    public function getRebatedFeeCurrency()
    {
        return $this->container['rebated_fee_currency'];
    }

    /**
     * Sets rebated_fee_currency
     *
     * @param string|null $rebated_fee_currency Rebated fee currency unit
     *
     * @return $this
     */
    public function setRebatedFeeCurrency($rebated_fee_currency)
    {
        $this->container['rebated_fee_currency'] = $rebated_fee_currency;

        return $this;
    }

    /**
     * Gets stp_id
     *
     * @return int|null
     */
    public function getStpId()
    {
        return $this->container['stp_id'];
    }

    /**
     * Sets stp_id
     *
     * @param int|null $stp_id Orders between users in the same `stp_id` group are not allowed to be self-traded  1. If the `stp_id` of two orders being matched is non-zero and equal, they will not be executed. Instead, the corresponding strategy will be executed based on the `stp_act` of the taker. 2. `stp_id` returns `0` by default for orders that have not been set for `STP group`
     *
     * @return $this
     */
    public function setStpId($stp_id)
    {
        $this->container['stp_id'] = $stp_id;

        return $this;
    }

    /**
     * Gets stp_act
     *
     * @return string|null
     */
    public function getStpAct()
    {
        return $this->container['stp_act'];
    }

    /**
     * Sets stp_act
     *
     * @param string|null $stp_act Self-Trading Prevention Action. Users can use this field to set self-trade prevetion strategies  1. After users join the `STP Group`, he can pass `stp_act` to limit the user's self-trade prevetion strategy. If `stp_act` is not passed, the default is `cn` strategy。 2. When the user does not join the `STP group`, an error will be returned when passing the `stp_act` parameter。 3. If the user did not use 'stp_act' when placing the order, 'stp_act' will return '-'  - cn: Cancel newest, Cancel new orders and keep old ones - co: Cancel oldest, Cancel old orders and keep new ones - cb: Cancel both, Both old and new orders will be cancelled
     *
     * @return $this
     */
    public function setStpAct($stp_act)
    {
        $allowedValues = $this->getStpActAllowableValues();
        if (!is_null($stp_act) && !in_array($stp_act, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'stp_act', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stp_act'] = $stp_act;

        return $this;
    }

    /**
     * Gets finish_as
     *
     * @return string|null
     */
    public function getFinishAs()
    {
        return $this->container['finish_as'];
    }

    /**
     * Sets finish_as
     *
     * @param string|null $finish_as Order completion statuses include:  - open: Awaiting processing - filled: Fully filled - cancelled: Cancelled by user - liquidate_cancelled: Cancelled due to liquidation - small: Order quantity too small - depth_not_enough: Cancelled due to insufficient market depth - trader_not_enough: Cancelled due to insufficient counterparty - ioc: Not immediately filled because tif is set to ioc - poc: Not met the order strategy because tif is set to poc - fok: Not fully filled immediately because tif is set to fok - stp: Cancelled due to self-trade prevention - unknown: Unknown
     *
     * @return $this
     */
    public function setFinishAs($finish_as)
    {
        $allowedValues = $this->getFinishAsAllowableValues();
        if (!is_null($finish_as) && !in_array($finish_as, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'finish_as', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['finish_as'] = $finish_as;

        return $this;
    }

    /**
     * Gets action_mode
     *
     * @return string|null
     */
    public function getActionMode()
    {
        return $this->container['action_mode'];
    }

    /**
     * Sets action_mode
     *
     * @param string|null $action_mode Processing Mode: When placing an order, different fields are returned based on action_mode. This field is only valid during the request and is not included in the response result ACK: Asynchronous mode, only returns key order fields RESULT: No clearing information FULL: Full mode (default)
     *
     * @return $this
     */
    public function setActionMode($action_mode)
    {
        $this->container['action_mode'] = $action_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


