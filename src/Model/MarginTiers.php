<?php
/**
 * MarginTiers
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * MarginTiers Class Doc Comment
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class MarginTiers implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MarginTiers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tier' => 'string',
        'margin_rate' => 'string',
        'lower_limit' => 'string',
        'upper_limit' => 'string',
        'leverage' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'tier' => null,
        'margin_rate' => null,
        'lower_limit' => null,
        'upper_limit' => null,
        'leverage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tier' => 'tier',
        'margin_rate' => 'margin_rate',
        'lower_limit' => 'lower_limit',
        'upper_limit' => 'upper_limit',
        'leverage' => 'leverage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tier' => 'setTier',
        'margin_rate' => 'setMarginRate',
        'lower_limit' => 'setLowerLimit',
        'upper_limit' => 'setUpperLimit',
        'leverage' => 'setLeverage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tier' => 'getTier',
        'margin_rate' => 'getMarginRate',
        'lower_limit' => 'getLowerLimit',
        'upper_limit' => 'getUpperLimit',
        'leverage' => 'getLeverage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tier'] = isset($data['tier']) ? $data['tier'] : null;
        $this->container['margin_rate'] = isset($data['margin_rate']) ? $data['margin_rate'] : null;
        $this->container['lower_limit'] = isset($data['lower_limit']) ? $data['lower_limit'] : null;
        $this->container['upper_limit'] = isset($data['upper_limit']) ? $data['upper_limit'] : null;
        $this->container['leverage'] = isset($data['leverage']) ? $data['leverage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tier
     *
     * @return string|null
     */
    public function getTier()
    {
        return $this->container['tier'];
    }

    /**
     * Sets tier
     *
     * @param string|null $tier Tier
     *
     * @return $this
     */
    public function setTier($tier)
    {
        $this->container['tier'] = $tier;

        return $this;
    }

    /**
     * Gets margin_rate
     *
     * @return string|null
     */
    public function getMarginRate()
    {
        return $this->container['margin_rate'];
    }

    /**
     * Sets margin_rate
     *
     * @param string|null $margin_rate Discount
     *
     * @return $this
     */
    public function setMarginRate($margin_rate)
    {
        $this->container['margin_rate'] = $margin_rate;

        return $this;
    }

    /**
     * Gets lower_limit
     *
     * @return string|null
     */
    public function getLowerLimit()
    {
        return $this->container['lower_limit'];
    }

    /**
     * Sets lower_limit
     *
     * @param string|null $lower_limit Lower limit
     *
     * @return $this
     */
    public function setLowerLimit($lower_limit)
    {
        $this->container['lower_limit'] = $lower_limit;

        return $this;
    }

    /**
     * Gets upper_limit
     *
     * @return string|null
     */
    public function getUpperLimit()
    {
        return $this->container['upper_limit'];
    }

    /**
     * Sets upper_limit
     *
     * @param string|null $upper_limit Upper limit, \"\" indicates greater than (the last tier)
     *
     * @return $this
     */
    public function setUpperLimit($upper_limit)
    {
        $this->container['upper_limit'] = $upper_limit;

        return $this;
    }

    /**
     * Gets leverage
     *
     * @return string|null
     */
    public function getLeverage()
    {
        return $this->container['leverage'];
    }

    /**
     * Sets leverage
     *
     * @param string|null $leverage Position leverage
     *
     * @return $this
     */
    public function setLeverage($leverage)
    {
        $this->container['leverage'] = $leverage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


