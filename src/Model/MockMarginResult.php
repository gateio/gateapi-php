<?php
/**
 * MockMarginResult
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * MockMarginResult Class Doc Comment
 *
 * @category Class
 * @description Margin result
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class MockMarginResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MockMarginResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'profit_loss_ranges' => '\GateApi\Model\ProfitLossRange[]',
        'max_loss' => '\GateApi\Model\ProfitLossRange',
        'mr1' => 'string',
        'mr2' => 'string',
        'mr3' => 'string',
        'mr4' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'type' => null,
        'profit_loss_ranges' => null,
        'max_loss' => null,
        'mr1' => null,
        'mr2' => null,
        'mr3' => null,
        'mr4' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'profit_loss_ranges' => 'profit_loss_ranges',
        'max_loss' => 'max_loss',
        'mr1' => 'mr1',
        'mr2' => 'mr2',
        'mr3' => 'mr3',
        'mr4' => 'mr4'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'profit_loss_ranges' => 'setProfitLossRanges',
        'max_loss' => 'setMaxLoss',
        'mr1' => 'setMr1',
        'mr2' => 'setMr2',
        'mr3' => 'setMr3',
        'mr4' => 'setMr4'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'profit_loss_ranges' => 'getProfitLossRanges',
        'max_loss' => 'getMaxLoss',
        'mr1' => 'getMr1',
        'mr2' => 'getMr2',
        'mr3' => 'getMr3',
        'mr4' => 'getMr4'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['profit_loss_ranges'] = isset($data['profit_loss_ranges']) ? $data['profit_loss_ranges'] : null;
        $this->container['max_loss'] = isset($data['max_loss']) ? $data['max_loss'] : null;
        $this->container['mr1'] = isset($data['mr1']) ? $data['mr1'] : null;
        $this->container['mr2'] = isset($data['mr2']) ? $data['mr2'] : null;
        $this->container['mr3'] = isset($data['mr3']) ? $data['mr3'] : null;
        $this->container['mr4'] = isset($data['mr4']) ? $data['mr4'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Position combination type `original_position` - Original position `long_delta_original_position` - Positive delta + Original position `short_delta_original_position` - Negative delta + Original position
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets profit_loss_ranges
     *
     * @return \GateApi\Model\ProfitLossRange[]|null
     */
    public function getProfitLossRanges()
    {
        return $this->container['profit_loss_ranges'];
    }

    /**
     * Sets profit_loss_ranges
     *
     * @param \GateApi\Model\ProfitLossRange[]|null $profit_loss_ranges Results of 33 stress scenarios for MR1
     *
     * @return $this
     */
    public function setProfitLossRanges($profit_loss_ranges)
    {
        $this->container['profit_loss_ranges'] = $profit_loss_ranges;

        return $this;
    }

    /**
     * Gets max_loss
     *
     * @return \GateApi\Model\ProfitLossRange|null
     */
    public function getMaxLoss()
    {
        return $this->container['max_loss'];
    }

    /**
     * Sets max_loss
     *
     * @param \GateApi\Model\ProfitLossRange|null $max_loss 最大损失
     *
     * @return $this
     */
    public function setMaxLoss($max_loss)
    {
        $this->container['max_loss'] = $max_loss;

        return $this;
    }

    /**
     * Gets mr1
     *
     * @return string|null
     */
    public function getMr1()
    {
        return $this->container['mr1'];
    }

    /**
     * Sets mr1
     *
     * @param string|null $mr1 Stress testing
     *
     * @return $this
     */
    public function setMr1($mr1)
    {
        $this->container['mr1'] = $mr1;

        return $this;
    }

    /**
     * Gets mr2
     *
     * @return string|null
     */
    public function getMr2()
    {
        return $this->container['mr2'];
    }

    /**
     * Sets mr2
     *
     * @param string|null $mr2 Basis spread risk
     *
     * @return $this
     */
    public function setMr2($mr2)
    {
        $this->container['mr2'] = $mr2;

        return $this;
    }

    /**
     * Gets mr3
     *
     * @return string|null
     */
    public function getMr3()
    {
        return $this->container['mr3'];
    }

    /**
     * Sets mr3
     *
     * @param string|null $mr3 Volatility spread risk
     *
     * @return $this
     */
    public function setMr3($mr3)
    {
        $this->container['mr3'] = $mr3;

        return $this;
    }

    /**
     * Gets mr4
     *
     * @return string|null
     */
    public function getMr4()
    {
        return $this->container['mr4'];
    }

    /**
     * Sets mr4
     *
     * @param string|null $mr4 Option short risk
     *
     * @return $this
     */
    public function setMr4($mr4)
    {
        $this->container['mr4'] = $mr4;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


