<?php
/**
 * UnifiedPortfolioInput
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * UnifiedPortfolioInput Class Doc Comment
 *
 * @category Class
 * @description Portfolio margin calculator input
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class UnifiedPortfolioInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UnifiedPortfolioInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'spot_balances' => '\GateApi\Model\MockSpotBalance[]',
        'spot_orders' => '\GateApi\Model\MockSpotOrder[]',
        'futures_positions' => '\GateApi\Model\MockFuturesPosition[]',
        'futures_orders' => '\GateApi\Model\MockFuturesOrder[]',
        'options_positions' => '\GateApi\Model\MockOptionsPosition[]',
        'options_orders' => '\GateApi\Model\MockOptionsOrder[]',
        'spot_hedge' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'spot_balances' => null,
        'spot_orders' => null,
        'futures_positions' => null,
        'futures_orders' => null,
        'options_positions' => null,
        'options_orders' => null,
        'spot_hedge' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'spot_balances' => 'spot_balances',
        'spot_orders' => 'spot_orders',
        'futures_positions' => 'futures_positions',
        'futures_orders' => 'futures_orders',
        'options_positions' => 'options_positions',
        'options_orders' => 'options_orders',
        'spot_hedge' => 'spot_hedge'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'spot_balances' => 'setSpotBalances',
        'spot_orders' => 'setSpotOrders',
        'futures_positions' => 'setFuturesPositions',
        'futures_orders' => 'setFuturesOrders',
        'options_positions' => 'setOptionsPositions',
        'options_orders' => 'setOptionsOrders',
        'spot_hedge' => 'setSpotHedge'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'spot_balances' => 'getSpotBalances',
        'spot_orders' => 'getSpotOrders',
        'futures_positions' => 'getFuturesPositions',
        'futures_orders' => 'getFuturesOrders',
        'options_positions' => 'getOptionsPositions',
        'options_orders' => 'getOptionsOrders',
        'spot_hedge' => 'getSpotHedge'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['spot_balances'] = isset($data['spot_balances']) ? $data['spot_balances'] : null;
        $this->container['spot_orders'] = isset($data['spot_orders']) ? $data['spot_orders'] : null;
        $this->container['futures_positions'] = isset($data['futures_positions']) ? $data['futures_positions'] : null;
        $this->container['futures_orders'] = isset($data['futures_orders']) ? $data['futures_orders'] : null;
        $this->container['options_positions'] = isset($data['options_positions']) ? $data['options_positions'] : null;
        $this->container['options_orders'] = isset($data['options_orders']) ? $data['options_orders'] : null;
        $this->container['spot_hedge'] = isset($data['spot_hedge']) ? $data['spot_hedge'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets spot_balances
     *
     * @return \GateApi\Model\MockSpotBalance[]|null
     */
    public function getSpotBalances()
    {
        return $this->container['spot_balances'];
    }

    /**
     * Sets spot_balances
     *
     * @param \GateApi\Model\MockSpotBalance[]|null $spot_balances Spot
     *
     * @return $this
     */
    public function setSpotBalances($spot_balances)
    {
        $this->container['spot_balances'] = $spot_balances;

        return $this;
    }

    /**
     * Gets spot_orders
     *
     * @return \GateApi\Model\MockSpotOrder[]|null
     */
    public function getSpotOrders()
    {
        return $this->container['spot_orders'];
    }

    /**
     * Sets spot_orders
     *
     * @param \GateApi\Model\MockSpotOrder[]|null $spot_orders Spot orders
     *
     * @return $this
     */
    public function setSpotOrders($spot_orders)
    {
        $this->container['spot_orders'] = $spot_orders;

        return $this;
    }

    /**
     * Gets futures_positions
     *
     * @return \GateApi\Model\MockFuturesPosition[]|null
     */
    public function getFuturesPositions()
    {
        return $this->container['futures_positions'];
    }

    /**
     * Sets futures_positions
     *
     * @param \GateApi\Model\MockFuturesPosition[]|null $futures_positions Futures positions
     *
     * @return $this
     */
    public function setFuturesPositions($futures_positions)
    {
        $this->container['futures_positions'] = $futures_positions;

        return $this;
    }

    /**
     * Gets futures_orders
     *
     * @return \GateApi\Model\MockFuturesOrder[]|null
     */
    public function getFuturesOrders()
    {
        return $this->container['futures_orders'];
    }

    /**
     * Sets futures_orders
     *
     * @param \GateApi\Model\MockFuturesOrder[]|null $futures_orders Futures order
     *
     * @return $this
     */
    public function setFuturesOrders($futures_orders)
    {
        $this->container['futures_orders'] = $futures_orders;

        return $this;
    }

    /**
     * Gets options_positions
     *
     * @return \GateApi\Model\MockOptionsPosition[]|null
     */
    public function getOptionsPositions()
    {
        return $this->container['options_positions'];
    }

    /**
     * Sets options_positions
     *
     * @param \GateApi\Model\MockOptionsPosition[]|null $options_positions Options positions
     *
     * @return $this
     */
    public function setOptionsPositions($options_positions)
    {
        $this->container['options_positions'] = $options_positions;

        return $this;
    }

    /**
     * Gets options_orders
     *
     * @return \GateApi\Model\MockOptionsOrder[]|null
     */
    public function getOptionsOrders()
    {
        return $this->container['options_orders'];
    }

    /**
     * Sets options_orders
     *
     * @param \GateApi\Model\MockOptionsOrder[]|null $options_orders Option orders
     *
     * @return $this
     */
    public function setOptionsOrders($options_orders)
    {
        $this->container['options_orders'] = $options_orders;

        return $this;
    }

    /**
     * Gets spot_hedge
     *
     * @return bool|null
     */
    public function getSpotHedge()
    {
        return $this->container['spot_hedge'];
    }

    /**
     * Sets spot_hedge
     *
     * @param bool|null $spot_hedge Whether to enable spot hedging
     *
     * @return $this
     */
    public function setSpotHedge($spot_hedge)
    {
        $this->container['spot_hedge'] = $spot_hedge;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


