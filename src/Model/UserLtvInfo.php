<?php
/**
 * UserLtvInfo
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * UserLtvInfo Class Doc Comment
 *
 * @category Class
 * @description User&#39;s currency statistics data
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class UserLtvInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserLtvInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'collateral_currency' => 'string',
        'borrow_currency' => 'string',
        'init_ltv' => 'string',
        'alert_ltv' => 'string',
        'liquidate_ltv' => 'string',
        'min_borrow_amount' => 'string',
        'left_borrowable_amount' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'collateral_currency' => null,
        'borrow_currency' => null,
        'init_ltv' => null,
        'alert_ltv' => null,
        'liquidate_ltv' => null,
        'min_borrow_amount' => null,
        'left_borrowable_amount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'collateral_currency' => 'collateral_currency',
        'borrow_currency' => 'borrow_currency',
        'init_ltv' => 'init_ltv',
        'alert_ltv' => 'alert_ltv',
        'liquidate_ltv' => 'liquidate_ltv',
        'min_borrow_amount' => 'min_borrow_amount',
        'left_borrowable_amount' => 'left_borrowable_amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'collateral_currency' => 'setCollateralCurrency',
        'borrow_currency' => 'setBorrowCurrency',
        'init_ltv' => 'setInitLtv',
        'alert_ltv' => 'setAlertLtv',
        'liquidate_ltv' => 'setLiquidateLtv',
        'min_borrow_amount' => 'setMinBorrowAmount',
        'left_borrowable_amount' => 'setLeftBorrowableAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'collateral_currency' => 'getCollateralCurrency',
        'borrow_currency' => 'getBorrowCurrency',
        'init_ltv' => 'getInitLtv',
        'alert_ltv' => 'getAlertLtv',
        'liquidate_ltv' => 'getLiquidateLtv',
        'min_borrow_amount' => 'getMinBorrowAmount',
        'left_borrowable_amount' => 'getLeftBorrowableAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['collateral_currency'] = isset($data['collateral_currency']) ? $data['collateral_currency'] : null;
        $this->container['borrow_currency'] = isset($data['borrow_currency']) ? $data['borrow_currency'] : null;
        $this->container['init_ltv'] = isset($data['init_ltv']) ? $data['init_ltv'] : null;
        $this->container['alert_ltv'] = isset($data['alert_ltv']) ? $data['alert_ltv'] : null;
        $this->container['liquidate_ltv'] = isset($data['liquidate_ltv']) ? $data['liquidate_ltv'] : null;
        $this->container['min_borrow_amount'] = isset($data['min_borrow_amount']) ? $data['min_borrow_amount'] : null;
        $this->container['left_borrowable_amount'] = isset($data['left_borrowable_amount']) ? $data['left_borrowable_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets collateral_currency
     *
     * @return string|null
     */
    public function getCollateralCurrency()
    {
        return $this->container['collateral_currency'];
    }

    /**
     * Sets collateral_currency
     *
     * @param string|null $collateral_currency Collateral currency
     *
     * @return $this
     */
    public function setCollateralCurrency($collateral_currency)
    {
        $this->container['collateral_currency'] = $collateral_currency;

        return $this;
    }

    /**
     * Gets borrow_currency
     *
     * @return string|null
     */
    public function getBorrowCurrency()
    {
        return $this->container['borrow_currency'];
    }

    /**
     * Sets borrow_currency
     *
     * @param string|null $borrow_currency Borrowed currency
     *
     * @return $this
     */
    public function setBorrowCurrency($borrow_currency)
    {
        $this->container['borrow_currency'] = $borrow_currency;

        return $this;
    }

    /**
     * Gets init_ltv
     *
     * @return string|null
     */
    public function getInitLtv()
    {
        return $this->container['init_ltv'];
    }

    /**
     * Sets init_ltv
     *
     * @param string|null $init_ltv Initial collateralization rate
     *
     * @return $this
     */
    public function setInitLtv($init_ltv)
    {
        $this->container['init_ltv'] = $init_ltv;

        return $this;
    }

    /**
     * Gets alert_ltv
     *
     * @return string|null
     */
    public function getAlertLtv()
    {
        return $this->container['alert_ltv'];
    }

    /**
     * Sets alert_ltv
     *
     * @param string|null $alert_ltv Warning collateralization rate
     *
     * @return $this
     */
    public function setAlertLtv($alert_ltv)
    {
        $this->container['alert_ltv'] = $alert_ltv;

        return $this;
    }

    /**
     * Gets liquidate_ltv
     *
     * @return string|null
     */
    public function getLiquidateLtv()
    {
        return $this->container['liquidate_ltv'];
    }

    /**
     * Sets liquidate_ltv
     *
     * @param string|null $liquidate_ltv Liquidation collateralization rate
     *
     * @return $this
     */
    public function setLiquidateLtv($liquidate_ltv)
    {
        $this->container['liquidate_ltv'] = $liquidate_ltv;

        return $this;
    }

    /**
     * Gets min_borrow_amount
     *
     * @return string|null
     */
    public function getMinBorrowAmount()
    {
        return $this->container['min_borrow_amount'];
    }

    /**
     * Sets min_borrow_amount
     *
     * @param string|null $min_borrow_amount Minimum borrowable amount for the loan currency
     *
     * @return $this
     */
    public function setMinBorrowAmount($min_borrow_amount)
    {
        $this->container['min_borrow_amount'] = $min_borrow_amount;

        return $this;
    }

    /**
     * Gets left_borrowable_amount
     *
     * @return string|null
     */
    public function getLeftBorrowableAmount()
    {
        return $this->container['left_borrowable_amount'];
    }

    /**
     * Sets left_borrowable_amount
     *
     * @param string|null $left_borrowable_amount Remaining borrowable amount for the loan currency
     *
     * @return $this
     */
    public function setLeftBorrowableAmount($left_borrowable_amount)
    {
        $this->container['left_borrowable_amount'] = $left_borrowable_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


