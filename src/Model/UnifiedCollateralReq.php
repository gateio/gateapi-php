<?php
/**
 * UnifiedCollateralReq
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * UnifiedCollateralReq Class Doc Comment
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class UnifiedCollateralReq implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UnifiedCollateralReq';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'collateral_type' => 'int',
        'enable_list' => 'string[]',
        'disable_list' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'collateral_type' => null,
        'enable_list' => null,
        'disable_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'collateral_type' => 'collateral_type',
        'enable_list' => 'enable_list',
        'disable_list' => 'disable_list'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'collateral_type' => 'setCollateralType',
        'enable_list' => 'setEnableList',
        'disable_list' => 'setDisableList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'collateral_type' => 'getCollateralType',
        'enable_list' => 'getEnableList',
        'disable_list' => 'getDisableList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const COLLATERAL_TYPE_0 = 0;
    const COLLATERAL_TYPE_1 = 1;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCollateralTypeAllowableValues()
    {
        return [
            self::COLLATERAL_TYPE_0,
            self::COLLATERAL_TYPE_1,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['collateral_type'] = isset($data['collateral_type']) ? $data['collateral_type'] : null;
        $this->container['enable_list'] = isset($data['enable_list']) ? $data['enable_list'] : null;
        $this->container['disable_list'] = isset($data['disable_list']) ? $data['disable_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCollateralTypeAllowableValues();
        if (!is_null($this->container['collateral_type']) && !in_array($this->container['collateral_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'collateral_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets collateral_type
     *
     * @return int|null
     */
    public function getCollateralType()
    {
        return $this->container['collateral_type'];
    }

    /**
     * Sets collateral_type
     *
     * @param int|null $collateral_type User-set collateral mode0(all)-All currencies used as collateral, 1(custom)-Custom currencies used as collateral; when collateral_type is 0(all), the enable_list and disable_list parameters are invalid
     *
     * @return $this
     */
    public function setCollateralType($collateral_type)
    {
        $allowedValues = $this->getCollateralTypeAllowableValues();
        if (!is_null($collateral_type) && !in_array($collateral_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'collateral_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['collateral_type'] = $collateral_type;

        return $this;
    }

    /**
     * Gets enable_list
     *
     * @return string[]|null
     */
    public function getEnableList()
    {
        return $this->container['enable_list'];
    }

    /**
     * Sets enable_list
     *
     * @param string[]|null $enable_list Currency list, where collateral_type=1(custom) indicates the logic of addition
     *
     * @return $this
     */
    public function setEnableList($enable_list)
    {
        $this->container['enable_list'] = $enable_list;

        return $this;
    }

    /**
     * Gets disable_list
     *
     * @return string[]|null
     */
    public function getDisableList()
    {
        return $this->container['disable_list'];
    }

    /**
     * Sets disable_list
     *
     * @param string[]|null $disable_list Cancellation list, indicating the logic of cancellation
     *
     * @return $this
     */
    public function setDisableList($disable_list)
    {
        $this->container['disable_list'] = $disable_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


