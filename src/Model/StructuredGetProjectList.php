<?php
/**
 * StructuredGetProjectList
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * StructuredGetProjectList Class Doc Comment
 *
 * @category Class
 * @description Structured Products.
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class StructuredGetProjectList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StructuredGetProjectList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'type' => 'string',
        'name_en' => 'string',
        'investment_coin' => 'string',
        'investment_period' => 'string',
        'min_annual_rate' => 'string',
        'mid_annual_rate' => 'string',
        'max_annual_rate' => 'string',
        'watch_market' => 'string',
        'start_time' => 'int',
        'end_time' => 'int',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'type' => null,
        'name_en' => null,
        'investment_coin' => null,
        'investment_period' => null,
        'min_annual_rate' => null,
        'mid_annual_rate' => null,
        'max_annual_rate' => null,
        'watch_market' => null,
        'start_time' => 'int32',
        'end_time' => 'int32',
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'name_en' => 'name_en',
        'investment_coin' => 'investment_coin',
        'investment_period' => 'investment_period',
        'min_annual_rate' => 'min_annual_rate',
        'mid_annual_rate' => 'mid_annual_rate',
        'max_annual_rate' => 'max_annual_rate',
        'watch_market' => 'watch_market',
        'start_time' => 'start_time',
        'end_time' => 'end_time',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'name_en' => 'setNameEn',
        'investment_coin' => 'setInvestmentCoin',
        'investment_period' => 'setInvestmentPeriod',
        'min_annual_rate' => 'setMinAnnualRate',
        'mid_annual_rate' => 'setMidAnnualRate',
        'max_annual_rate' => 'setMaxAnnualRate',
        'watch_market' => 'setWatchMarket',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'name_en' => 'getNameEn',
        'investment_coin' => 'getInvestmentCoin',
        'investment_period' => 'getInvestmentPeriod',
        'min_annual_rate' => 'getMinAnnualRate',
        'mid_annual_rate' => 'getMidAnnualRate',
        'max_annual_rate' => 'getMaxAnnualRate',
        'watch_market' => 'getWatchMarket',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['name_en'] = isset($data['name_en']) ? $data['name_en'] : null;
        $this->container['investment_coin'] = isset($data['investment_coin']) ? $data['investment_coin'] : null;
        $this->container['investment_period'] = isset($data['investment_period']) ? $data['investment_period'] : null;
        $this->container['min_annual_rate'] = isset($data['min_annual_rate']) ? $data['min_annual_rate'] : null;
        $this->container['mid_annual_rate'] = isset($data['mid_annual_rate']) ? $data['mid_annual_rate'] : null;
        $this->container['max_annual_rate'] = isset($data['max_annual_rate']) ? $data['max_annual_rate'] : null;
        $this->container['watch_market'] = isset($data['watch_market']) ? $data['watch_market'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Plan ID.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type product type:   `SharkFin2.0`-Shark Fin2.0  `BullishSharkFin`-Bullish Shark Fin  `BearishSharkFin`-Bearish Shark Fin `DoubleNoTouch`-Double No-Touch `RangeAccrual`-Range Accrual `SnowBall`-Snow Ball
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name_en
     *
     * @return string|null
     */
    public function getNameEn()
    {
        return $this->container['name_en'];
    }

    /**
     * Sets name_en
     *
     * @param string|null $name_en name.
     *
     * @return $this
     */
    public function setNameEn($name_en)
    {
        $this->container['name_en'] = $name_en;

        return $this;
    }

    /**
     * Gets investment_coin
     *
     * @return string|null
     */
    public function getInvestmentCoin()
    {
        return $this->container['investment_coin'];
    }

    /**
     * Sets investment_coin
     *
     * @param string|null $investment_coin Investment Currency.
     *
     * @return $this
     */
    public function setInvestmentCoin($investment_coin)
    {
        $this->container['investment_coin'] = $investment_coin;

        return $this;
    }

    /**
     * Gets investment_period
     *
     * @return string|null
     */
    public function getInvestmentPeriod()
    {
        return $this->container['investment_period'];
    }

    /**
     * Sets investment_period
     *
     * @param string|null $investment_period Investment term.
     *
     * @return $this
     */
    public function setInvestmentPeriod($investment_period)
    {
        $this->container['investment_period'] = $investment_period;

        return $this;
    }

    /**
     * Gets min_annual_rate
     *
     * @return string|null
     */
    public function getMinAnnualRate()
    {
        return $this->container['min_annual_rate'];
    }

    /**
     * Sets min_annual_rate
     *
     * @param string|null $min_annual_rate Minimum annual rate.
     *
     * @return $this
     */
    public function setMinAnnualRate($min_annual_rate)
    {
        $this->container['min_annual_rate'] = $min_annual_rate;

        return $this;
    }

    /**
     * Gets mid_annual_rate
     *
     * @return string|null
     */
    public function getMidAnnualRate()
    {
        return $this->container['mid_annual_rate'];
    }

    /**
     * Sets mid_annual_rate
     *
     * @param string|null $mid_annual_rate Intermediate annual rate.
     *
     * @return $this
     */
    public function setMidAnnualRate($mid_annual_rate)
    {
        $this->container['mid_annual_rate'] = $mid_annual_rate;

        return $this;
    }

    /**
     * Gets max_annual_rate
     *
     * @return string|null
     */
    public function getMaxAnnualRate()
    {
        return $this->container['max_annual_rate'];
    }

    /**
     * Sets max_annual_rate
     *
     * @param string|null $max_annual_rate Maximum annual rate.
     *
     * @return $this
     */
    public function setMaxAnnualRate($max_annual_rate)
    {
        $this->container['max_annual_rate'] = $max_annual_rate;

        return $this;
    }

    /**
     * Gets watch_market
     *
     * @return string|null
     */
    public function getWatchMarket()
    {
        return $this->container['watch_market'];
    }

    /**
     * Sets watch_market
     *
     * @param string|null $watch_market Watch market.
     *
     * @return $this
     */
    public function setWatchMarket($watch_market)
    {
        $this->container['watch_market'] = $watch_market;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return int|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param int|null $start_time start time.
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return int|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param int|null $end_time Finished time.
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status:   `in_process`-in progress  `will_begin`-will begin  `wait_settlement`-waiting for settlement  `done`-done
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


