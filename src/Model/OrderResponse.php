<?php
/**
 * OrderResponse
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.io
 */

/**
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * OrderResponse Class Doc Comment
 *
 * @category Class
 * @description 下单返回
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.io
 */
class OrderResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_id' => 'string',
        'tx_hash' => 'string',
        'side' => 'string',
        'usdt_amount' => 'string',
        'currency' => 'string',
        'currency_amount' => 'string',
        'status' => 'int',
        'gas_mode' => 'string',
        'chain' => 'string',
        'gas_fee' => 'string',
        'transaction_fee' => 'string',
        'failed_reason' => 'string',
        'create_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'order_id' => null,
        'tx_hash' => null,
        'side' => null,
        'usdt_amount' => null,
        'currency' => null,
        'currency_amount' => null,
        'status' => 'int32',
        'gas_mode' => null,
        'chain' => null,
        'gas_fee' => null,
        'transaction_fee' => null,
        'failed_reason' => null,
        'create_time' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'order_id',
        'tx_hash' => 'tx_hash',
        'side' => 'side',
        'usdt_amount' => 'usdt_amount',
        'currency' => 'currency',
        'currency_amount' => 'currency_amount',
        'status' => 'status',
        'gas_mode' => 'gas_mode',
        'chain' => 'chain',
        'gas_fee' => 'gas_fee',
        'transaction_fee' => 'transaction_fee',
        'failed_reason' => 'failed_reason',
        'create_time' => 'create_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'tx_hash' => 'setTxHash',
        'side' => 'setSide',
        'usdt_amount' => 'setUsdtAmount',
        'currency' => 'setCurrency',
        'currency_amount' => 'setCurrencyAmount',
        'status' => 'setStatus',
        'gas_mode' => 'setGasMode',
        'chain' => 'setChain',
        'gas_fee' => 'setGasFee',
        'transaction_fee' => 'setTransactionFee',
        'failed_reason' => 'setFailedReason',
        'create_time' => 'setCreateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'tx_hash' => 'getTxHash',
        'side' => 'getSide',
        'usdt_amount' => 'getUsdtAmount',
        'currency' => 'getCurrency',
        'currency_amount' => 'getCurrencyAmount',
        'status' => 'getStatus',
        'gas_mode' => 'getGasMode',
        'chain' => 'getChain',
        'gas_fee' => 'getGasFee',
        'transaction_fee' => 'getTransactionFee',
        'failed_reason' => 'getFailedReason',
        'create_time' => 'getCreateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['tx_hash'] = isset($data['tx_hash']) ? $data['tx_hash'] : null;
        $this->container['side'] = isset($data['side']) ? $data['side'] : null;
        $this->container['usdt_amount'] = isset($data['usdt_amount']) ? $data['usdt_amount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['currency_amount'] = isset($data['currency_amount']) ? $data['currency_amount'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['gas_mode'] = isset($data['gas_mode']) ? $data['gas_mode'] : null;
        $this->container['chain'] = isset($data['chain']) ? $data['chain'] : null;
        $this->container['gas_fee'] = isset($data['gas_fee']) ? $data['gas_fee'] : null;
        $this->container['transaction_fee'] = isset($data['transaction_fee']) ? $data['transaction_fee'] : null;
        $this->container['failed_reason'] = isset($data['failed_reason']) ? $data['failed_reason'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id Order ID
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets tx_hash
     *
     * @return string|null
     */
    public function getTxHash()
    {
        return $this->container['tx_hash'];
    }

    /**
     * Sets tx_hash
     *
     * @param string|null $tx_hash Transaction Hash
     *
     * @return $this
     */
    public function setTxHash($tx_hash)
    {
        $this->container['tx_hash'] = $tx_hash;

        return $this;
    }

    /**
     * Gets side
     *
     * @return string|null
     */
    public function getSide()
    {
        return $this->container['side'];
    }

    /**
     * Sets side
     *
     * @param string|null $side 买单或者卖单 - buy - sell
     *
     * @return $this
     */
    public function setSide($side)
    {
        $this->container['side'] = $side;

        return $this;
    }

    /**
     * Gets usdt_amount
     *
     * @return string|null
     */
    public function getUsdtAmount()
    {
        return $this->container['usdt_amount'];
    }

    /**
     * Sets usdt_amount
     *
     * @param string|null $usdt_amount Amount
     *
     * @return $this
     */
    public function setUsdtAmount($usdt_amount)
    {
        $this->container['usdt_amount'] = $usdt_amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency 币
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets currency_amount
     *
     * @return string|null
     */
    public function getCurrencyAmount()
    {
        return $this->container['currency_amount'];
    }

    /**
     * Sets currency_amount
     *
     * @param string|null $currency_amount Currency amount
     *
     * @return $this
     */
    public function setCurrencyAmount($currency_amount)
    {
        $this->container['currency_amount'] = $currency_amount;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int|null $status Order Status - `0` : All - `1` : Processing - `2` : Successful - `3` : Failed - `4` : Canceled - `5` : Buy order placed but transfer not completed - `6` : Cancelled order with transfer not complete
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets gas_mode
     *
     * @return string|null
     */
    public function getGasMode()
    {
        return $this->container['gas_mode'];
    }

    /**
     * Sets gas_mode
     *
     * @param string|null $gas_mode Trading mode affects slippage selection - `speed` : Smart mode - `custom` : Custom mode, uses `slippage` parameter
     *
     * @return $this
     */
    public function setGasMode($gas_mode)
    {
        $this->container['gas_mode'] = $gas_mode;

        return $this;
    }

    /**
     * Gets chain
     *
     * @return string|null
     */
    public function getChain()
    {
        return $this->container['chain'];
    }

    /**
     * Sets chain
     *
     * @param string|null $chain 链
     *
     * @return $this
     */
    public function setChain($chain)
    {
        $this->container['chain'] = $chain;

        return $this;
    }

    /**
     * Gets gas_fee
     *
     * @return string|null
     */
    public function getGasFee()
    {
        return $this->container['gas_fee'];
    }

    /**
     * Sets gas_fee
     *
     * @param string|null $gas_fee Miner Fee (USDT-based)
     *
     * @return $this
     */
    public function setGasFee($gas_fee)
    {
        $this->container['gas_fee'] = $gas_fee;

        return $this;
    }

    /**
     * Gets transaction_fee
     *
     * @return string|null
     */
    public function getTransactionFee()
    {
        return $this->container['transaction_fee'];
    }

    /**
     * Sets transaction_fee
     *
     * @param string|null $transaction_fee Trading Fee (USDT-based)
     *
     * @return $this
     */
    public function setTransactionFee($transaction_fee)
    {
        $this->container['transaction_fee'] = $transaction_fee;

        return $this;
    }

    /**
     * Gets failed_reason
     *
     * @return string|null
     */
    public function getFailedReason()
    {
        return $this->container['failed_reason'];
    }

    /**
     * Sets failed_reason
     *
     * @param string|null $failed_reason Failure reason (if any)
     *
     * @return $this
     */
    public function setFailedReason($failed_reason)
    {
        $this->container['failed_reason'] = $failed_reason;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return int|null
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param int|null $create_time 创建时间（时间戳）
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


