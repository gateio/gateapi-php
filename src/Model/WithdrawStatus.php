<?php
/**
 * WithdrawStatus
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * WithdrawStatus Class Doc Comment
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class WithdrawStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WithdrawStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'currency' => 'string',
        'name' => 'string',
        'name_cn' => 'string',
        'deposit' => 'string',
        'withdraw_percent' => 'string',
        'withdraw_fix' => 'string',
        'withdraw_day_limit' => 'string',
        'withdraw_amount_mini' => 'string',
        'withdraw_day_limit_remain' => 'string',
        'withdraw_eachtime_limit' => 'string',
        'withdraw_fix_on_chains' => 'map[string,string]',
        'withdraw_percent_on_chains' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'currency' => null,
        'name' => null,
        'name_cn' => null,
        'deposit' => null,
        'withdraw_percent' => null,
        'withdraw_fix' => null,
        'withdraw_day_limit' => null,
        'withdraw_amount_mini' => null,
        'withdraw_day_limit_remain' => null,
        'withdraw_eachtime_limit' => null,
        'withdraw_fix_on_chains' => null,
        'withdraw_percent_on_chains' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency' => 'currency',
        'name' => 'name',
        'name_cn' => 'name_cn',
        'deposit' => 'deposit',
        'withdraw_percent' => 'withdraw_percent',
        'withdraw_fix' => 'withdraw_fix',
        'withdraw_day_limit' => 'withdraw_day_limit',
        'withdraw_amount_mini' => 'withdraw_amount_mini',
        'withdraw_day_limit_remain' => 'withdraw_day_limit_remain',
        'withdraw_eachtime_limit' => 'withdraw_eachtime_limit',
        'withdraw_fix_on_chains' => 'withdraw_fix_on_chains',
        'withdraw_percent_on_chains' => 'withdraw_percent_on_chains'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency' => 'setCurrency',
        'name' => 'setName',
        'name_cn' => 'setNameCn',
        'deposit' => 'setDeposit',
        'withdraw_percent' => 'setWithdrawPercent',
        'withdraw_fix' => 'setWithdrawFix',
        'withdraw_day_limit' => 'setWithdrawDayLimit',
        'withdraw_amount_mini' => 'setWithdrawAmountMini',
        'withdraw_day_limit_remain' => 'setWithdrawDayLimitRemain',
        'withdraw_eachtime_limit' => 'setWithdrawEachtimeLimit',
        'withdraw_fix_on_chains' => 'setWithdrawFixOnChains',
        'withdraw_percent_on_chains' => 'setWithdrawPercentOnChains'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency' => 'getCurrency',
        'name' => 'getName',
        'name_cn' => 'getNameCn',
        'deposit' => 'getDeposit',
        'withdraw_percent' => 'getWithdrawPercent',
        'withdraw_fix' => 'getWithdrawFix',
        'withdraw_day_limit' => 'getWithdrawDayLimit',
        'withdraw_amount_mini' => 'getWithdrawAmountMini',
        'withdraw_day_limit_remain' => 'getWithdrawDayLimitRemain',
        'withdraw_eachtime_limit' => 'getWithdrawEachtimeLimit',
        'withdraw_fix_on_chains' => 'getWithdrawFixOnChains',
        'withdraw_percent_on_chains' => 'getWithdrawPercentOnChains'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['name_cn'] = isset($data['name_cn']) ? $data['name_cn'] : null;
        $this->container['deposit'] = isset($data['deposit']) ? $data['deposit'] : null;
        $this->container['withdraw_percent'] = isset($data['withdraw_percent']) ? $data['withdraw_percent'] : null;
        $this->container['withdraw_fix'] = isset($data['withdraw_fix']) ? $data['withdraw_fix'] : null;
        $this->container['withdraw_day_limit'] = isset($data['withdraw_day_limit']) ? $data['withdraw_day_limit'] : null;
        $this->container['withdraw_amount_mini'] = isset($data['withdraw_amount_mini']) ? $data['withdraw_amount_mini'] : null;
        $this->container['withdraw_day_limit_remain'] = isset($data['withdraw_day_limit_remain']) ? $data['withdraw_day_limit_remain'] : null;
        $this->container['withdraw_eachtime_limit'] = isset($data['withdraw_eachtime_limit']) ? $data['withdraw_eachtime_limit'] : null;
        $this->container['withdraw_fix_on_chains'] = isset($data['withdraw_fix_on_chains']) ? $data['withdraw_fix_on_chains'] : null;
        $this->container['withdraw_percent_on_chains'] = isset($data['withdraw_percent_on_chains']) ? $data['withdraw_percent_on_chains'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Currency name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_cn
     *
     * @return string|null
     */
    public function getNameCn()
    {
        return $this->container['name_cn'];
    }

    /**
     * Sets name_cn
     *
     * @param string|null $name_cn Currency Chinese name
     *
     * @return $this
     */
    public function setNameCn($name_cn)
    {
        $this->container['name_cn'] = $name_cn;

        return $this;
    }

    /**
     * Gets deposit
     *
     * @return string|null
     */
    public function getDeposit()
    {
        return $this->container['deposit'];
    }

    /**
     * Sets deposit
     *
     * @param string|null $deposit Deposit fee
     *
     * @return $this
     */
    public function setDeposit($deposit)
    {
        $this->container['deposit'] = $deposit;

        return $this;
    }

    /**
     * Gets withdraw_percent
     *
     * @return string|null
     */
    public function getWithdrawPercent()
    {
        return $this->container['withdraw_percent'];
    }

    /**
     * Sets withdraw_percent
     *
     * @param string|null $withdraw_percent Withdrawal fee rate percentage
     *
     * @return $this
     */
    public function setWithdrawPercent($withdraw_percent)
    {
        $this->container['withdraw_percent'] = $withdraw_percent;

        return $this;
    }

    /**
     * Gets withdraw_fix
     *
     * @return string|null
     */
    public function getWithdrawFix()
    {
        return $this->container['withdraw_fix'];
    }

    /**
     * Sets withdraw_fix
     *
     * @param string|null $withdraw_fix Fixed withdrawal fee
     *
     * @return $this
     */
    public function setWithdrawFix($withdraw_fix)
    {
        $this->container['withdraw_fix'] = $withdraw_fix;

        return $this;
    }

    /**
     * Gets withdraw_day_limit
     *
     * @return string|null
     */
    public function getWithdrawDayLimit()
    {
        return $this->container['withdraw_day_limit'];
    }

    /**
     * Sets withdraw_day_limit
     *
     * @param string|null $withdraw_day_limit Daily allowed withdrawal amount
     *
     * @return $this
     */
    public function setWithdrawDayLimit($withdraw_day_limit)
    {
        $this->container['withdraw_day_limit'] = $withdraw_day_limit;

        return $this;
    }

    /**
     * Gets withdraw_amount_mini
     *
     * @return string|null
     */
    public function getWithdrawAmountMini()
    {
        return $this->container['withdraw_amount_mini'];
    }

    /**
     * Sets withdraw_amount_mini
     *
     * @param string|null $withdraw_amount_mini Minimum withdrawal amount
     *
     * @return $this
     */
    public function setWithdrawAmountMini($withdraw_amount_mini)
    {
        $this->container['withdraw_amount_mini'] = $withdraw_amount_mini;

        return $this;
    }

    /**
     * Gets withdraw_day_limit_remain
     *
     * @return string|null
     */
    public function getWithdrawDayLimitRemain()
    {
        return $this->container['withdraw_day_limit_remain'];
    }

    /**
     * Sets withdraw_day_limit_remain
     *
     * @param string|null $withdraw_day_limit_remain Daily withdrawal amount left
     *
     * @return $this
     */
    public function setWithdrawDayLimitRemain($withdraw_day_limit_remain)
    {
        $this->container['withdraw_day_limit_remain'] = $withdraw_day_limit_remain;

        return $this;
    }

    /**
     * Gets withdraw_eachtime_limit
     *
     * @return string|null
     */
    public function getWithdrawEachtimeLimit()
    {
        return $this->container['withdraw_eachtime_limit'];
    }

    /**
     * Sets withdraw_eachtime_limit
     *
     * @param string|null $withdraw_eachtime_limit Maximum amount for each withdrawal
     *
     * @return $this
     */
    public function setWithdrawEachtimeLimit($withdraw_eachtime_limit)
    {
        $this->container['withdraw_eachtime_limit'] = $withdraw_eachtime_limit;

        return $this;
    }

    /**
     * Gets withdraw_fix_on_chains
     *
     * @return map[string,string]|null
     */
    public function getWithdrawFixOnChains()
    {
        return $this->container['withdraw_fix_on_chains'];
    }

    /**
     * Sets withdraw_fix_on_chains
     *
     * @param map[string,string]|null $withdraw_fix_on_chains Fixed withdrawal fee on multiple chains
     *
     * @return $this
     */
    public function setWithdrawFixOnChains($withdraw_fix_on_chains)
    {
        $this->container['withdraw_fix_on_chains'] = $withdraw_fix_on_chains;

        return $this;
    }

    /**
     * Gets withdraw_percent_on_chains
     *
     * @return map[string,string]|null
     */
    public function getWithdrawPercentOnChains()
    {
        return $this->container['withdraw_percent_on_chains'];
    }

    /**
     * Sets withdraw_percent_on_chains
     *
     * @param map[string,string]|null $withdraw_percent_on_chains Percentage withdrawal fee on multiple chains
     *
     * @return $this
     */
    public function setWithdrawPercentOnChains($withdraw_percent_on_chains)
    {
        $this->container['withdraw_percent_on_chains'] = $withdraw_percent_on_chains;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


