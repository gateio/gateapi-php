<?php
/**
 * FlashSwapOrder
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * FlashSwapOrder Class Doc Comment
 *
 * @category Class
 * @description Flash swap order.
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class FlashSwapOrder implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FlashSwapOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'create_time' => 'int',
        'user_id' => 'int',
        'sell_currency' => 'string',
        'sell_amount' => 'string',
        'buy_currency' => 'string',
        'buy_amount' => 'string',
        'price' => 'string',
        'status' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'create_time' => 'int64',
        'user_id' => 'int64',
        'sell_currency' => null,
        'sell_amount' => null,
        'buy_currency' => null,
        'buy_amount' => null,
        'price' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'create_time' => 'create_time',
        'user_id' => 'user_id',
        'sell_currency' => 'sell_currency',
        'sell_amount' => 'sell_amount',
        'buy_currency' => 'buy_currency',
        'buy_amount' => 'buy_amount',
        'price' => 'price',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'create_time' => 'setCreateTime',
        'user_id' => 'setUserId',
        'sell_currency' => 'setSellCurrency',
        'sell_amount' => 'setSellAmount',
        'buy_currency' => 'setBuyCurrency',
        'buy_amount' => 'setBuyAmount',
        'price' => 'setPrice',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'create_time' => 'getCreateTime',
        'user_id' => 'getUserId',
        'sell_currency' => 'getSellCurrency',
        'sell_amount' => 'getSellAmount',
        'buy_currency' => 'getBuyCurrency',
        'buy_amount' => 'getBuyAmount',
        'price' => 'getPrice',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['sell_currency'] = isset($data['sell_currency']) ? $data['sell_currency'] : null;
        $this->container['sell_amount'] = isset($data['sell_amount']) ? $data['sell_amount'] : null;
        $this->container['buy_currency'] = isset($data['buy_currency']) ? $data['buy_currency'] : null;
        $this->container['buy_amount'] = isset($data['buy_amount']) ? $data['buy_amount'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Flash swap order ID.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return int|null
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param int|null $create_time Creation time of order (in milliseconds).
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id User ID.
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets sell_currency
     *
     * @return string|null
     */
    public function getSellCurrency()
    {
        return $this->container['sell_currency'];
    }

    /**
     * Sets sell_currency
     *
     * @param string|null $sell_currency Currency to sell.
     *
     * @return $this
     */
    public function setSellCurrency($sell_currency)
    {
        $this->container['sell_currency'] = $sell_currency;

        return $this;
    }

    /**
     * Gets sell_amount
     *
     * @return string|null
     */
    public function getSellAmount()
    {
        return $this->container['sell_amount'];
    }

    /**
     * Sets sell_amount
     *
     * @param string|null $sell_amount Amount to sell.
     *
     * @return $this
     */
    public function setSellAmount($sell_amount)
    {
        $this->container['sell_amount'] = $sell_amount;

        return $this;
    }

    /**
     * Gets buy_currency
     *
     * @return string|null
     */
    public function getBuyCurrency()
    {
        return $this->container['buy_currency'];
    }

    /**
     * Sets buy_currency
     *
     * @param string|null $buy_currency Currency to buy.
     *
     * @return $this
     */
    public function setBuyCurrency($buy_currency)
    {
        $this->container['buy_currency'] = $buy_currency;

        return $this;
    }

    /**
     * Gets buy_amount
     *
     * @return string|null
     */
    public function getBuyAmount()
    {
        return $this->container['buy_amount'];
    }

    /**
     * Sets buy_amount
     *
     * @param string|null $buy_amount Amount to buy.
     *
     * @return $this
     */
    public function setBuyAmount($buy_amount)
    {
        $this->container['buy_amount'] = $buy_amount;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string|null $price Price.
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int|null $status Flash swap order status  `1` - success `2` - failure
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


