<?php
/**
 * UnifiedPortfolioOutput
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * UnifiedPortfolioOutput Class Doc Comment
 *
 * @category Class
 * @description Portfolio margin calculator output
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class UnifiedPortfolioOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UnifiedPortfolioOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'maintain_margin_total' => 'string',
        'initial_margin_total' => 'string',
        'calculate_time' => 'int',
        'risk_unit' => '\GateApi\Model\MockRiskUnit[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'maintain_margin_total' => null,
        'initial_margin_total' => null,
        'calculate_time' => 'int64',
        'risk_unit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'maintain_margin_total' => 'maintain_margin_total',
        'initial_margin_total' => 'initial_margin_total',
        'calculate_time' => 'calculate_time',
        'risk_unit' => 'risk_unit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'maintain_margin_total' => 'setMaintainMarginTotal',
        'initial_margin_total' => 'setInitialMarginTotal',
        'calculate_time' => 'setCalculateTime',
        'risk_unit' => 'setRiskUnit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'maintain_margin_total' => 'getMaintainMarginTotal',
        'initial_margin_total' => 'getInitialMarginTotal',
        'calculate_time' => 'getCalculateTime',
        'risk_unit' => 'getRiskUnit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['maintain_margin_total'] = isset($data['maintain_margin_total']) ? $data['maintain_margin_total'] : null;
        $this->container['initial_margin_total'] = isset($data['initial_margin_total']) ? $data['initial_margin_total'] : null;
        $this->container['calculate_time'] = isset($data['calculate_time']) ? $data['calculate_time'] : null;
        $this->container['risk_unit'] = isset($data['risk_unit']) ? $data['risk_unit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets maintain_margin_total
     *
     * @return string|null
     */
    public function getMaintainMarginTotal()
    {
        return $this->container['maintain_margin_total'];
    }

    /**
     * Sets maintain_margin_total
     *
     * @param string|null $maintain_margin_total Total maintenance margin, including only portfolio margin calculation results for positions in risk units, excluding borrowing margin. If borrowing exists, conventional borrowing margin requirements will still apply
     *
     * @return $this
     */
    public function setMaintainMarginTotal($maintain_margin_total)
    {
        $this->container['maintain_margin_total'] = $maintain_margin_total;

        return $this;
    }

    /**
     * Gets initial_margin_total
     *
     * @return string|null
     */
    public function getInitialMarginTotal()
    {
        return $this->container['initial_margin_total'];
    }

    /**
     * Sets initial_margin_total
     *
     * @param string|null $initial_margin_total Total initial margin, calculated as the maximum of the following three combinations: position, position + positive delta orders, position + negative delta orders
     *
     * @return $this
     */
    public function setInitialMarginTotal($initial_margin_total)
    {
        $this->container['initial_margin_total'] = $initial_margin_total;

        return $this;
    }

    /**
     * Gets calculate_time
     *
     * @return int|null
     */
    public function getCalculateTime()
    {
        return $this->container['calculate_time'];
    }

    /**
     * Sets calculate_time
     *
     * @param int|null $calculate_time Calculation time
     *
     * @return $this
     */
    public function setCalculateTime($calculate_time)
    {
        $this->container['calculate_time'] = $calculate_time;

        return $this;
    }

    /**
     * Gets risk_unit
     *
     * @return \GateApi\Model\MockRiskUnit[]|null
     */
    public function getRiskUnit()
    {
        return $this->container['risk_unit'];
    }

    /**
     * Sets risk_unit
     *
     * @param \GateApi\Model\MockRiskUnit[]|null $risk_unit Risk unit
     *
     * @return $this
     */
    public function setRiskUnit($risk_unit)
    {
        $this->container['risk_unit'] = $risk_unit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


