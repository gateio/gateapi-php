<?php
/**
 * SubCrossMarginAccount
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * SubCrossMarginAccount Class Doc Comment
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class SubCrossMarginAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SubCrossMarginAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user_id' => 'int',
        'locked' => 'bool',
        'balances' => 'map[string,\GateApi\Model\CrossMarginBalance]',
        'total' => 'string',
        'borrowed' => 'string',
        'borrowed_net' => 'string',
        'net' => 'string',
        'leverage' => 'string',
        'interest' => 'string',
        'risk' => 'string',
        'total_initial_margin' => 'string',
        'total_margin_balance' => 'string',
        'total_maintenance_margin' => 'string',
        'total_initial_margin_rate' => 'string',
        'total_maintenance_margin_rate' => 'string',
        'total_available_margin' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'user_id' => 'int64',
        'locked' => null,
        'balances' => null,
        'total' => null,
        'borrowed' => null,
        'borrowed_net' => null,
        'net' => null,
        'leverage' => null,
        'interest' => null,
        'risk' => null,
        'total_initial_margin' => null,
        'total_margin_balance' => null,
        'total_maintenance_margin' => null,
        'total_initial_margin_rate' => null,
        'total_maintenance_margin_rate' => null,
        'total_available_margin' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_id' => 'user_id',
        'locked' => 'locked',
        'balances' => 'balances',
        'total' => 'total',
        'borrowed' => 'borrowed',
        'borrowed_net' => 'borrowed_net',
        'net' => 'net',
        'leverage' => 'leverage',
        'interest' => 'interest',
        'risk' => 'risk',
        'total_initial_margin' => 'total_initial_margin',
        'total_margin_balance' => 'total_margin_balance',
        'total_maintenance_margin' => 'total_maintenance_margin',
        'total_initial_margin_rate' => 'total_initial_margin_rate',
        'total_maintenance_margin_rate' => 'total_maintenance_margin_rate',
        'total_available_margin' => 'total_available_margin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_id' => 'setUserId',
        'locked' => 'setLocked',
        'balances' => 'setBalances',
        'total' => 'setTotal',
        'borrowed' => 'setBorrowed',
        'borrowed_net' => 'setBorrowedNet',
        'net' => 'setNet',
        'leverage' => 'setLeverage',
        'interest' => 'setInterest',
        'risk' => 'setRisk',
        'total_initial_margin' => 'setTotalInitialMargin',
        'total_margin_balance' => 'setTotalMarginBalance',
        'total_maintenance_margin' => 'setTotalMaintenanceMargin',
        'total_initial_margin_rate' => 'setTotalInitialMarginRate',
        'total_maintenance_margin_rate' => 'setTotalMaintenanceMarginRate',
        'total_available_margin' => 'setTotalAvailableMargin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_id' => 'getUserId',
        'locked' => 'getLocked',
        'balances' => 'getBalances',
        'total' => 'getTotal',
        'borrowed' => 'getBorrowed',
        'borrowed_net' => 'getBorrowedNet',
        'net' => 'getNet',
        'leverage' => 'getLeverage',
        'interest' => 'getInterest',
        'risk' => 'getRisk',
        'total_initial_margin' => 'getTotalInitialMargin',
        'total_margin_balance' => 'getTotalMarginBalance',
        'total_maintenance_margin' => 'getTotalMaintenanceMargin',
        'total_initial_margin_rate' => 'getTotalInitialMarginRate',
        'total_maintenance_margin_rate' => 'getTotalMaintenanceMarginRate',
        'total_available_margin' => 'getTotalAvailableMargin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['balances'] = isset($data['balances']) ? $data['balances'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['borrowed'] = isset($data['borrowed']) ? $data['borrowed'] : null;
        $this->container['borrowed_net'] = isset($data['borrowed_net']) ? $data['borrowed_net'] : null;
        $this->container['net'] = isset($data['net']) ? $data['net'] : null;
        $this->container['leverage'] = isset($data['leverage']) ? $data['leverage'] : null;
        $this->container['interest'] = isset($data['interest']) ? $data['interest'] : null;
        $this->container['risk'] = isset($data['risk']) ? $data['risk'] : null;
        $this->container['total_initial_margin'] = isset($data['total_initial_margin']) ? $data['total_initial_margin'] : null;
        $this->container['total_margin_balance'] = isset($data['total_margin_balance']) ? $data['total_margin_balance'] : null;
        $this->container['total_maintenance_margin'] = isset($data['total_maintenance_margin']) ? $data['total_maintenance_margin'] : null;
        $this->container['total_initial_margin_rate'] = isset($data['total_initial_margin_rate']) ? $data['total_initial_margin_rate'] : null;
        $this->container['total_maintenance_margin_rate'] = isset($data['total_maintenance_margin_rate']) ? $data['total_maintenance_margin_rate'] : null;
        $this->container['total_available_margin'] = isset($data['total_available_margin']) ? $data['total_available_margin'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id User ID of the cross margin account. 0 means that the subaccount has not yet opened a cross margin account
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool|null
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool|null $locked Whether account is locked
     *
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets balances
     *
     * @return map[string,\GateApi\Model\CrossMarginBalance]|null
     */
    public function getBalances()
    {
        return $this->container['balances'];
    }

    /**
     * Sets balances
     *
     * @param map[string,\GateApi\Model\CrossMarginBalance]|null $balances balances
     *
     * @return $this
     */
    public function setBalances($balances)
    {
        $this->container['balances'] = $balances;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string|null $total Total account value in USDT, i.e., the sum of all currencies' `(available+freeze)*price*discount`
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets borrowed
     *
     * @return string|null
     */
    public function getBorrowed()
    {
        return $this->container['borrowed'];
    }

    /**
     * Sets borrowed
     *
     * @param string|null $borrowed Total borrowed value in USDT, i.e., the sum of all currencies' `borrowed*price*discount`
     *
     * @return $this
     */
    public function setBorrowed($borrowed)
    {
        $this->container['borrowed'] = $borrowed;

        return $this;
    }

    /**
     * Gets borrowed_net
     *
     * @return string|null
     */
    public function getBorrowedNet()
    {
        return $this->container['borrowed_net'];
    }

    /**
     * Sets borrowed_net
     *
     * @param string|null $borrowed_net Total borrowed value in USDT * borrowed factor
     *
     * @return $this
     */
    public function setBorrowedNet($borrowed_net)
    {
        $this->container['borrowed_net'] = $borrowed_net;

        return $this;
    }

    /**
     * Gets net
     *
     * @return string|null
     */
    public function getNet()
    {
        return $this->container['net'];
    }

    /**
     * Sets net
     *
     * @param string|null $net Total net assets in USDT
     *
     * @return $this
     */
    public function setNet($net)
    {
        $this->container['net'] = $net;

        return $this;
    }

    /**
     * Gets leverage
     *
     * @return string|null
     */
    public function getLeverage()
    {
        return $this->container['leverage'];
    }

    /**
     * Sets leverage
     *
     * @param string|null $leverage Position leverage
     *
     * @return $this
     */
    public function setLeverage($leverage)
    {
        $this->container['leverage'] = $leverage;

        return $this;
    }

    /**
     * Gets interest
     *
     * @return string|null
     */
    public function getInterest()
    {
        return $this->container['interest'];
    }

    /**
     * Sets interest
     *
     * @param string|null $interest Total unpaid interests in USDT, i.e., the sum of all currencies' `interest*price*discount`
     *
     * @return $this
     */
    public function setInterest($interest)
    {
        $this->container['interest'] = $interest;

        return $this;
    }

    /**
     * Gets risk
     *
     * @return string|null
     */
    public function getRisk()
    {
        return $this->container['risk'];
    }

    /**
     * Sets risk
     *
     * @param string|null $risk Risk rate. When it belows 110%, liquidation will be triggered. Calculation formula: `total / (borrowed+interest)`
     *
     * @return $this
     */
    public function setRisk($risk)
    {
        $this->container['risk'] = $risk;

        return $this;
    }

    /**
     * Gets total_initial_margin
     *
     * @return string|null
     */
    public function getTotalInitialMargin()
    {
        return $this->container['total_initial_margin'];
    }

    /**
     * Sets total_initial_margin
     *
     * @param string|null $total_initial_margin Total initial margin
     *
     * @return $this
     */
    public function setTotalInitialMargin($total_initial_margin)
    {
        $this->container['total_initial_margin'] = $total_initial_margin;

        return $this;
    }

    /**
     * Gets total_margin_balance
     *
     * @return string|null
     */
    public function getTotalMarginBalance()
    {
        return $this->container['total_margin_balance'];
    }

    /**
     * Sets total_margin_balance
     *
     * @param string|null $total_margin_balance Total margin balance
     *
     * @return $this
     */
    public function setTotalMarginBalance($total_margin_balance)
    {
        $this->container['total_margin_balance'] = $total_margin_balance;

        return $this;
    }

    /**
     * Gets total_maintenance_margin
     *
     * @return string|null
     */
    public function getTotalMaintenanceMargin()
    {
        return $this->container['total_maintenance_margin'];
    }

    /**
     * Sets total_maintenance_margin
     *
     * @param string|null $total_maintenance_margin Total maintenance margin
     *
     * @return $this
     */
    public function setTotalMaintenanceMargin($total_maintenance_margin)
    {
        $this->container['total_maintenance_margin'] = $total_maintenance_margin;

        return $this;
    }

    /**
     * Gets total_initial_margin_rate
     *
     * @return string|null
     */
    public function getTotalInitialMarginRate()
    {
        return $this->container['total_initial_margin_rate'];
    }

    /**
     * Sets total_initial_margin_rate
     *
     * @param string|null $total_initial_margin_rate Total initial margin rate
     *
     * @return $this
     */
    public function setTotalInitialMarginRate($total_initial_margin_rate)
    {
        $this->container['total_initial_margin_rate'] = $total_initial_margin_rate;

        return $this;
    }

    /**
     * Gets total_maintenance_margin_rate
     *
     * @return string|null
     */
    public function getTotalMaintenanceMarginRate()
    {
        return $this->container['total_maintenance_margin_rate'];
    }

    /**
     * Sets total_maintenance_margin_rate
     *
     * @param string|null $total_maintenance_margin_rate Total maintenance margin rate
     *
     * @return $this
     */
    public function setTotalMaintenanceMarginRate($total_maintenance_margin_rate)
    {
        $this->container['total_maintenance_margin_rate'] = $total_maintenance_margin_rate;

        return $this;
    }

    /**
     * Gets total_available_margin
     *
     * @return string|null
     */
    public function getTotalAvailableMargin()
    {
        return $this->container['total_available_margin'];
    }

    /**
     * Sets total_available_margin
     *
     * @param string|null $total_available_margin Total available margin
     *
     * @return $this
     */
    public function setTotalAvailableMargin($total_available_margin)
    {
        $this->container['total_available_margin'] = $total_available_margin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


