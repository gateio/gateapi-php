<?php
/**
 * BrokerCommissionSubBrokerInfo
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * BrokerCommissionSubBrokerInfo Class Doc Comment
 *
 * @category Class
 * @description The sub broker info.
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class BrokerCommissionSubBrokerInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BrokerCommission_sub_broker_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user_id' => 'int',
        'original_commission_rate' => 'string',
        'relative_commission_rate' => 'string',
        'commission_rate' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'user_id' => 'int64',
        'original_commission_rate' => null,
        'relative_commission_rate' => null,
        'commission_rate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_id' => 'user_id',
        'original_commission_rate' => 'original_commission_rate',
        'relative_commission_rate' => 'relative_commission_rate',
        'commission_rate' => 'commission_rate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_id' => 'setUserId',
        'original_commission_rate' => 'setOriginalCommissionRate',
        'relative_commission_rate' => 'setRelativeCommissionRate',
        'commission_rate' => 'setCommissionRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_id' => 'getUserId',
        'original_commission_rate' => 'getOriginalCommissionRate',
        'relative_commission_rate' => 'getRelativeCommissionRate',
        'commission_rate' => 'getCommissionRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['original_commission_rate'] = isset($data['original_commission_rate']) ? $data['original_commission_rate'] : null;
        $this->container['relative_commission_rate'] = isset($data['relative_commission_rate']) ? $data['relative_commission_rate'] : null;
        $this->container['commission_rate'] = isset($data['commission_rate']) ? $data['commission_rate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id The sub broker user ID.
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets original_commission_rate
     *
     * @return string|null
     */
    public function getOriginalCommissionRate()
    {
        return $this->container['original_commission_rate'];
    }

    /**
     * Sets original_commission_rate
     *
     * @param string|null $original_commission_rate The sub broker original commission rate.
     *
     * @return $this
     */
    public function setOriginalCommissionRate($original_commission_rate)
    {
        $this->container['original_commission_rate'] = $original_commission_rate;

        return $this;
    }

    /**
     * Gets relative_commission_rate
     *
     * @return string|null
     */
    public function getRelativeCommissionRate()
    {
        return $this->container['relative_commission_rate'];
    }

    /**
     * Sets relative_commission_rate
     *
     * @param string|null $relative_commission_rate The sub broker relative commission rate.
     *
     * @return $this
     */
    public function setRelativeCommissionRate($relative_commission_rate)
    {
        $this->container['relative_commission_rate'] = $relative_commission_rate;

        return $this;
    }

    /**
     * Gets commission_rate
     *
     * @return string|null
     */
    public function getCommissionRate()
    {
        return $this->container['commission_rate'];
    }

    /**
     * Sets commission_rate
     *
     * @param string|null $commission_rate The sub broker actual commission rate.
     *
     * @return $this
     */
    public function setCommissionRate($commission_rate)
    {
        $this->container['commission_rate'] = $commission_rate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


