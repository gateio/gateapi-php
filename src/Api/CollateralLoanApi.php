<?php
/**
 * CollateralLoanApi
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */

/**
 * Gate API
 *
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Api;

use GateApi\ApiException;
use GateApi\Configuration;
use GateApi\GateApiException;
use GateApi\HeaderSelector;
use GateApi\ObjectSerializer;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;

/**
 * CollateralLoanApi Class Doc Comment
 *
 * @category Class
 * @package  GateApi
 * @author   Gate
 * @link     https://www.gate.com
 */
class CollateralLoanApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation listCollateralLoanOrders
     *
     * Query collateral loan order list
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit Maximum number of records returned in a single list (optional, default to 100)
     * @param  string $collateral_currency Collateral currency (optional)
     * @param  string $borrow_currency Borrowed currency (optional)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\CollateralOrder[]
     */
    public function listCollateralLoanOrders($associative_array)
    {
        list($response) = $this->listCollateralLoanOrdersWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation listCollateralLoanOrdersWithHttpInfo
     *
     * Query collateral loan order list
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit Maximum number of records returned in a single list (optional, default to 100)
     * @param  string $collateral_currency Collateral currency (optional)
     * @param  string $borrow_currency Borrowed currency (optional)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\CollateralOrder[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listCollateralLoanOrdersWithHttpInfo($associative_array)
    {
        $request = $this->listCollateralLoanOrdersRequest($associative_array);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $responseBody = $e->getResponse() ? (string) $e->getResponse()->getBody() : null;
            if ($responseBody != null) {
                $gateError = json_decode($responseBody, true);
                if ($gateError !== null && isset($gateError['label'])) {
                    throw new GateApiException(
                        $gateError,
                        $e->getCode(),
                        $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                        $responseBody
                    );
                }
            }
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $responseBody
            );
        }

        $returnType = '\GateApi\Model\CollateralOrder[]';
        $responseBody = $response->getBody();
        if ($returnType === '\SplFileObject') {
            $content = $responseBody; //stream goes to serializer
        } else {
            $content = (string) $responseBody;
        }

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Operation listCollateralLoanOrdersAsync
     *
     * Query collateral loan order list
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit Maximum number of records returned in a single list (optional, default to 100)
     * @param  string $collateral_currency Collateral currency (optional)
     * @param  string $borrow_currency Borrowed currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCollateralLoanOrdersAsync($associative_array)
    {
        return $this->listCollateralLoanOrdersAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listCollateralLoanOrdersAsyncWithHttpInfo
     *
     * Query collateral loan order list
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit Maximum number of records returned in a single list (optional, default to 100)
     * @param  string $collateral_currency Collateral currency (optional)
     * @param  string $borrow_currency Borrowed currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCollateralLoanOrdersAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\GateApi\Model\CollateralOrder[]';
        $request = $this->listCollateralLoanOrdersRequest($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCollateralLoanOrders'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit Maximum number of records returned in a single list (optional, default to 100)
     * @param  string $collateral_currency Collateral currency (optional)
     * @param  string $borrow_currency Borrowed currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listCollateralLoanOrdersRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $page = array_key_exists('page', $associative_array) ? $associative_array['page'] : 1;
        $limit = array_key_exists('limit', $associative_array) ? $associative_array['limit'] : 100;
        $collateral_currency = array_key_exists('collateral_currency', $associative_array) ? $associative_array['collateral_currency'] : null;
        $borrow_currency = array_key_exists('borrow_currency', $associative_array) ? $associative_array['borrow_currency'] : null;

        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling CollateralLoanApi.listCollateralLoanOrders, must be bigger than or equal to 1.');
        }

        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CollateralLoanApi.listCollateralLoanOrders, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CollateralLoanApi.listCollateralLoanOrders, must be bigger than or equal to 1.');
        }


        $resourcePath = '/loan/collateral/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }

        // query params
        if ($collateral_currency !== null) {
            if('form' === 'form' && is_array($collateral_currency)) {
                foreach($collateral_currency as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['collateral_currency'] = $collateral_currency;
            }
        }

        // query params
        if ($borrow_currency !== null) {
            if('form' === 'form' && is_array($borrow_currency)) {
                foreach($borrow_currency as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['borrow_currency'] = $borrow_currency;
            }
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Gate APIv4 authentication
        $signHeaders = $this->config->buildSignHeaders('GET', $resourcePath, $queryParams, $httpBody);
        $headers = array_merge($headers, $signHeaders);

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCollateralLoan
     *
     * Place collateral loan order
     *
     * @param  \GateApi\Model\CreateCollateralOrder $create_collateral_order create_collateral_order (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\OrderResp
     */
    public function createCollateralLoan($create_collateral_order)
    {
        list($response) = $this->createCollateralLoanWithHttpInfo($create_collateral_order);
        return $response;
    }

    /**
     * Operation createCollateralLoanWithHttpInfo
     *
     * Place collateral loan order
     *
     * @param  \GateApi\Model\CreateCollateralOrder $create_collateral_order (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\OrderResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCollateralLoanWithHttpInfo($create_collateral_order)
    {
        $request = $this->createCollateralLoanRequest($create_collateral_order);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $responseBody = $e->getResponse() ? (string) $e->getResponse()->getBody() : null;
            if ($responseBody != null) {
                $gateError = json_decode($responseBody, true);
                if ($gateError !== null && isset($gateError['label'])) {
                    throw new GateApiException(
                        $gateError,
                        $e->getCode(),
                        $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                        $responseBody
                    );
                }
            }
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $responseBody
            );
        }

        $returnType = '\GateApi\Model\OrderResp';
        $responseBody = $response->getBody();
        if ($returnType === '\SplFileObject') {
            $content = $responseBody; //stream goes to serializer
        } else {
            $content = (string) $responseBody;
        }

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Operation createCollateralLoanAsync
     *
     * Place collateral loan order
     *
     * @param  \GateApi\Model\CreateCollateralOrder $create_collateral_order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCollateralLoanAsync($create_collateral_order)
    {
        return $this->createCollateralLoanAsyncWithHttpInfo($create_collateral_order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCollateralLoanAsyncWithHttpInfo
     *
     * Place collateral loan order
     *
     * @param  \GateApi\Model\CreateCollateralOrder $create_collateral_order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCollateralLoanAsyncWithHttpInfo($create_collateral_order)
    {
        $returnType = '\GateApi\Model\OrderResp';
        $request = $this->createCollateralLoanRequest($create_collateral_order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCollateralLoan'
     *
     * @param  \GateApi\Model\CreateCollateralOrder $create_collateral_order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createCollateralLoanRequest($create_collateral_order)
    {
        // verify the required parameter 'create_collateral_order' is set
        if ($create_collateral_order === null || (is_array($create_collateral_order) && count($create_collateral_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_collateral_order when calling createCollateralLoan'
            );
        }

        $resourcePath = '/loan/collateral/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // body params
        $_tempBody = null;
        if (isset($create_collateral_order)) {
            $_tempBody = $create_collateral_order;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Gate APIv4 authentication
        $signHeaders = $this->config->buildSignHeaders('POST', $resourcePath, $queryParams, $httpBody);
        $headers = array_merge($headers, $signHeaders);

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCollateralLoanOrderDetail
     *
     * Query single order details
     *
     * @param  int $order_id Order ID returned when order is successfully created (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\CollateralOrder
     */
    public function getCollateralLoanOrderDetail($order_id)
    {
        list($response) = $this->getCollateralLoanOrderDetailWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation getCollateralLoanOrderDetailWithHttpInfo
     *
     * Query single order details
     *
     * @param  int $order_id Order ID returned when order is successfully created (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\CollateralOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCollateralLoanOrderDetailWithHttpInfo($order_id)
    {
        $request = $this->getCollateralLoanOrderDetailRequest($order_id);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $responseBody = $e->getResponse() ? (string) $e->getResponse()->getBody() : null;
            if ($responseBody != null) {
                $gateError = json_decode($responseBody, true);
                if ($gateError !== null && isset($gateError['label'])) {
                    throw new GateApiException(
                        $gateError,
                        $e->getCode(),
                        $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                        $responseBody
                    );
                }
            }
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $responseBody
            );
        }

        $returnType = '\GateApi\Model\CollateralOrder';
        $responseBody = $response->getBody();
        if ($returnType === '\SplFileObject') {
            $content = $responseBody; //stream goes to serializer
        } else {
            $content = (string) $responseBody;
        }

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Operation getCollateralLoanOrderDetailAsync
     *
     * Query single order details
     *
     * @param  int $order_id Order ID returned when order is successfully created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollateralLoanOrderDetailAsync($order_id)
    {
        return $this->getCollateralLoanOrderDetailAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCollateralLoanOrderDetailAsyncWithHttpInfo
     *
     * Query single order details
     *
     * @param  int $order_id Order ID returned when order is successfully created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollateralLoanOrderDetailAsyncWithHttpInfo($order_id)
    {
        $returnType = '\GateApi\Model\CollateralOrder';
        $request = $this->getCollateralLoanOrderDetailRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCollateralLoanOrderDetail'
     *
     * @param  int $order_id Order ID returned when order is successfully created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCollateralLoanOrderDetailRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling getCollateralLoanOrderDetail'
            );
        }

        $resourcePath = '/loan/collateral/orders/{order_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Gate APIv4 authentication
        $signHeaders = $this->config->buildSignHeaders('GET', $resourcePath, $queryParams, $httpBody);
        $headers = array_merge($headers, $signHeaders);

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation repayCollateralLoan
     *
     * Collateral loan repayment
     *
     * @param  \GateApi\Model\RepayLoan $repay_loan repay_loan (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\RepayResp
     */
    public function repayCollateralLoan($repay_loan)
    {
        list($response) = $this->repayCollateralLoanWithHttpInfo($repay_loan);
        return $response;
    }

    /**
     * Operation repayCollateralLoanWithHttpInfo
     *
     * Collateral loan repayment
     *
     * @param  \GateApi\Model\RepayLoan $repay_loan (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\RepayResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function repayCollateralLoanWithHttpInfo($repay_loan)
    {
        $request = $this->repayCollateralLoanRequest($repay_loan);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $responseBody = $e->getResponse() ? (string) $e->getResponse()->getBody() : null;
            if ($responseBody != null) {
                $gateError = json_decode($responseBody, true);
                if ($gateError !== null && isset($gateError['label'])) {
                    throw new GateApiException(
                        $gateError,
                        $e->getCode(),
                        $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                        $responseBody
                    );
                }
            }
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $responseBody
            );
        }

        $returnType = '\GateApi\Model\RepayResp';
        $responseBody = $response->getBody();
        if ($returnType === '\SplFileObject') {
            $content = $responseBody; //stream goes to serializer
        } else {
            $content = (string) $responseBody;
        }

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Operation repayCollateralLoanAsync
     *
     * Collateral loan repayment
     *
     * @param  \GateApi\Model\RepayLoan $repay_loan (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function repayCollateralLoanAsync($repay_loan)
    {
        return $this->repayCollateralLoanAsyncWithHttpInfo($repay_loan)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation repayCollateralLoanAsyncWithHttpInfo
     *
     * Collateral loan repayment
     *
     * @param  \GateApi\Model\RepayLoan $repay_loan (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function repayCollateralLoanAsyncWithHttpInfo($repay_loan)
    {
        $returnType = '\GateApi\Model\RepayResp';
        $request = $this->repayCollateralLoanRequest($repay_loan);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'repayCollateralLoan'
     *
     * @param  \GateApi\Model\RepayLoan $repay_loan (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function repayCollateralLoanRequest($repay_loan)
    {
        // verify the required parameter 'repay_loan' is set
        if ($repay_loan === null || (is_array($repay_loan) && count($repay_loan) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repay_loan when calling repayCollateralLoan'
            );
        }

        $resourcePath = '/loan/collateral/repay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // body params
        $_tempBody = null;
        if (isset($repay_loan)) {
            $_tempBody = $repay_loan;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Gate APIv4 authentication
        $signHeaders = $this->config->buildSignHeaders('POST', $resourcePath, $queryParams, $httpBody);
        $headers = array_merge($headers, $signHeaders);

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listRepayRecords
     *
     * Query collateral loan repayment records
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $source Operation type: repay - Regular repayment, liquidate - Liquidation (required)
     * @param  string $borrow_currency Borrowed currency (optional)
     * @param  string $collateral_currency Collateral currency (optional)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit Maximum number of records returned in a single list (optional, default to 100)
     * @param  int $from Start timestamp for the query (optional)
     * @param  int $to End timestamp for the query, defaults to current time if not specified (optional)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\RepayRecord[]
     */
    public function listRepayRecords($associative_array)
    {
        list($response) = $this->listRepayRecordsWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation listRepayRecordsWithHttpInfo
     *
     * Query collateral loan repayment records
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $source Operation type: repay - Regular repayment, liquidate - Liquidation (required)
     * @param  string $borrow_currency Borrowed currency (optional)
     * @param  string $collateral_currency Collateral currency (optional)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit Maximum number of records returned in a single list (optional, default to 100)
     * @param  int $from Start timestamp for the query (optional)
     * @param  int $to End timestamp for the query, defaults to current time if not specified (optional)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\RepayRecord[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listRepayRecordsWithHttpInfo($associative_array)
    {
        $request = $this->listRepayRecordsRequest($associative_array);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $responseBody = $e->getResponse() ? (string) $e->getResponse()->getBody() : null;
            if ($responseBody != null) {
                $gateError = json_decode($responseBody, true);
                if ($gateError !== null && isset($gateError['label'])) {
                    throw new GateApiException(
                        $gateError,
                        $e->getCode(),
                        $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                        $responseBody
                    );
                }
            }
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $responseBody
            );
        }

        $returnType = '\GateApi\Model\RepayRecord[]';
        $responseBody = $response->getBody();
        if ($returnType === '\SplFileObject') {
            $content = $responseBody; //stream goes to serializer
        } else {
            $content = (string) $responseBody;
        }

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Operation listRepayRecordsAsync
     *
     * Query collateral loan repayment records
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $source Operation type: repay - Regular repayment, liquidate - Liquidation (required)
     * @param  string $borrow_currency Borrowed currency (optional)
     * @param  string $collateral_currency Collateral currency (optional)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit Maximum number of records returned in a single list (optional, default to 100)
     * @param  int $from Start timestamp for the query (optional)
     * @param  int $to End timestamp for the query, defaults to current time if not specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listRepayRecordsAsync($associative_array)
    {
        return $this->listRepayRecordsAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listRepayRecordsAsyncWithHttpInfo
     *
     * Query collateral loan repayment records
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $source Operation type: repay - Regular repayment, liquidate - Liquidation (required)
     * @param  string $borrow_currency Borrowed currency (optional)
     * @param  string $collateral_currency Collateral currency (optional)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit Maximum number of records returned in a single list (optional, default to 100)
     * @param  int $from Start timestamp for the query (optional)
     * @param  int $to End timestamp for the query, defaults to current time if not specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listRepayRecordsAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\GateApi\Model\RepayRecord[]';
        $request = $this->listRepayRecordsRequest($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listRepayRecords'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $source Operation type: repay - Regular repayment, liquidate - Liquidation (required)
     * @param  string $borrow_currency Borrowed currency (optional)
     * @param  string $collateral_currency Collateral currency (optional)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit Maximum number of records returned in a single list (optional, default to 100)
     * @param  int $from Start timestamp for the query (optional)
     * @param  int $to End timestamp for the query, defaults to current time if not specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listRepayRecordsRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $source = array_key_exists('source', $associative_array) ? $associative_array['source'] : null;
        $borrow_currency = array_key_exists('borrow_currency', $associative_array) ? $associative_array['borrow_currency'] : null;
        $collateral_currency = array_key_exists('collateral_currency', $associative_array) ? $associative_array['collateral_currency'] : null;
        $page = array_key_exists('page', $associative_array) ? $associative_array['page'] : 1;
        $limit = array_key_exists('limit', $associative_array) ? $associative_array['limit'] : 100;
        $from = array_key_exists('from', $associative_array) ? $associative_array['from'] : null;
        $to = array_key_exists('to', $associative_array) ? $associative_array['to'] : null;

        // verify the required parameter 'source' is set
        if ($source === null || (is_array($source) && count($source) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source when calling listRepayRecords'
            );
        }
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling CollateralLoanApi.listRepayRecords, must be bigger than or equal to 1.');
        }

        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CollateralLoanApi.listRepayRecords, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CollateralLoanApi.listRepayRecords, must be bigger than or equal to 1.');
        }


        $resourcePath = '/loan/collateral/repay_records';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($source !== null) {
            if('form' === 'form' && is_array($source)) {
                foreach($source as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['source'] = $source;
            }
        }

        // query params
        if ($borrow_currency !== null) {
            if('form' === 'form' && is_array($borrow_currency)) {
                foreach($borrow_currency as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['borrow_currency'] = $borrow_currency;
            }
        }

        // query params
        if ($collateral_currency !== null) {
            if('form' === 'form' && is_array($collateral_currency)) {
                foreach($collateral_currency as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['collateral_currency'] = $collateral_currency;
            }
        }

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }

        // query params
        if ($from !== null) {
            if('form' === 'form' && is_array($from)) {
                foreach($from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from'] = $from;
            }
        }

        // query params
        if ($to !== null) {
            if('form' === 'form' && is_array($to)) {
                foreach($to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['to'] = $to;
            }
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Gate APIv4 authentication
        $signHeaders = $this->config->buildSignHeaders('GET', $resourcePath, $queryParams, $httpBody);
        $headers = array_merge($headers, $signHeaders);

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCollateralRecords
     *
     * Query collateral adjustment records
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit Maximum number of records returned in a single list (optional, default to 100)
     * @param  int $from Start timestamp for the query (optional)
     * @param  int $to End timestamp for the query, defaults to current time if not specified (optional)
     * @param  string $borrow_currency Borrowed currency (optional)
     * @param  string $collateral_currency Collateral currency (optional)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\CollateralRecord[]
     */
    public function listCollateralRecords($associative_array)
    {
        list($response) = $this->listCollateralRecordsWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation listCollateralRecordsWithHttpInfo
     *
     * Query collateral adjustment records
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit Maximum number of records returned in a single list (optional, default to 100)
     * @param  int $from Start timestamp for the query (optional)
     * @param  int $to End timestamp for the query, defaults to current time if not specified (optional)
     * @param  string $borrow_currency Borrowed currency (optional)
     * @param  string $collateral_currency Collateral currency (optional)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\CollateralRecord[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listCollateralRecordsWithHttpInfo($associative_array)
    {
        $request = $this->listCollateralRecordsRequest($associative_array);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $responseBody = $e->getResponse() ? (string) $e->getResponse()->getBody() : null;
            if ($responseBody != null) {
                $gateError = json_decode($responseBody, true);
                if ($gateError !== null && isset($gateError['label'])) {
                    throw new GateApiException(
                        $gateError,
                        $e->getCode(),
                        $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                        $responseBody
                    );
                }
            }
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $responseBody
            );
        }

        $returnType = '\GateApi\Model\CollateralRecord[]';
        $responseBody = $response->getBody();
        if ($returnType === '\SplFileObject') {
            $content = $responseBody; //stream goes to serializer
        } else {
            $content = (string) $responseBody;
        }

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Operation listCollateralRecordsAsync
     *
     * Query collateral adjustment records
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit Maximum number of records returned in a single list (optional, default to 100)
     * @param  int $from Start timestamp for the query (optional)
     * @param  int $to End timestamp for the query, defaults to current time if not specified (optional)
     * @param  string $borrow_currency Borrowed currency (optional)
     * @param  string $collateral_currency Collateral currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCollateralRecordsAsync($associative_array)
    {
        return $this->listCollateralRecordsAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listCollateralRecordsAsyncWithHttpInfo
     *
     * Query collateral adjustment records
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit Maximum number of records returned in a single list (optional, default to 100)
     * @param  int $from Start timestamp for the query (optional)
     * @param  int $to End timestamp for the query, defaults to current time if not specified (optional)
     * @param  string $borrow_currency Borrowed currency (optional)
     * @param  string $collateral_currency Collateral currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCollateralRecordsAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\GateApi\Model\CollateralRecord[]';
        $request = $this->listCollateralRecordsRequest($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCollateralRecords'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit Maximum number of records returned in a single list (optional, default to 100)
     * @param  int $from Start timestamp for the query (optional)
     * @param  int $to End timestamp for the query, defaults to current time if not specified (optional)
     * @param  string $borrow_currency Borrowed currency (optional)
     * @param  string $collateral_currency Collateral currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listCollateralRecordsRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $page = array_key_exists('page', $associative_array) ? $associative_array['page'] : 1;
        $limit = array_key_exists('limit', $associative_array) ? $associative_array['limit'] : 100;
        $from = array_key_exists('from', $associative_array) ? $associative_array['from'] : null;
        $to = array_key_exists('to', $associative_array) ? $associative_array['to'] : null;
        $borrow_currency = array_key_exists('borrow_currency', $associative_array) ? $associative_array['borrow_currency'] : null;
        $collateral_currency = array_key_exists('collateral_currency', $associative_array) ? $associative_array['collateral_currency'] : null;

        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling CollateralLoanApi.listCollateralRecords, must be bigger than or equal to 1.');
        }

        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CollateralLoanApi.listCollateralRecords, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CollateralLoanApi.listCollateralRecords, must be bigger than or equal to 1.');
        }


        $resourcePath = '/loan/collateral/collaterals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }

        // query params
        if ($from !== null) {
            if('form' === 'form' && is_array($from)) {
                foreach($from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from'] = $from;
            }
        }

        // query params
        if ($to !== null) {
            if('form' === 'form' && is_array($to)) {
                foreach($to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['to'] = $to;
            }
        }

        // query params
        if ($borrow_currency !== null) {
            if('form' === 'form' && is_array($borrow_currency)) {
                foreach($borrow_currency as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['borrow_currency'] = $borrow_currency;
            }
        }

        // query params
        if ($collateral_currency !== null) {
            if('form' === 'form' && is_array($collateral_currency)) {
                foreach($collateral_currency as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['collateral_currency'] = $collateral_currency;
            }
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Gate APIv4 authentication
        $signHeaders = $this->config->buildSignHeaders('GET', $resourcePath, $queryParams, $httpBody);
        $headers = array_merge($headers, $signHeaders);

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation operateCollateral
     *
     * Increase or redeem collateral
     *
     * @param  \GateApi\Model\CollateralAlign $collateral_align collateral_align (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function operateCollateral($collateral_align)
    {
        $this->operateCollateralWithHttpInfo($collateral_align);
    }

    /**
     * Operation operateCollateralWithHttpInfo
     *
     * Increase or redeem collateral
     *
     * @param  \GateApi\Model\CollateralAlign $collateral_align (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function operateCollateralWithHttpInfo($collateral_align)
    {
        $request = $this->operateCollateralRequest($collateral_align);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $responseBody = $e->getResponse() ? (string) $e->getResponse()->getBody() : null;
            if ($responseBody != null) {
                $gateError = json_decode($responseBody, true);
                if ($gateError !== null && isset($gateError['label'])) {
                    throw new GateApiException(
                        $gateError,
                        $e->getCode(),
                        $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                        $responseBody
                    );
                }
            }
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $responseBody
            );
        }

        return [null, $statusCode, $response->getHeaders()];
    }

    /**
     * Operation operateCollateralAsync
     *
     * Increase or redeem collateral
     *
     * @param  \GateApi\Model\CollateralAlign $collateral_align (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function operateCollateralAsync($collateral_align)
    {
        return $this->operateCollateralAsyncWithHttpInfo($collateral_align)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation operateCollateralAsyncWithHttpInfo
     *
     * Increase or redeem collateral
     *
     * @param  \GateApi\Model\CollateralAlign $collateral_align (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function operateCollateralAsyncWithHttpInfo($collateral_align)
    {
        $returnType = '';
        $request = $this->operateCollateralRequest($collateral_align);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'operateCollateral'
     *
     * @param  \GateApi\Model\CollateralAlign $collateral_align (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function operateCollateralRequest($collateral_align)
    {
        // verify the required parameter 'collateral_align' is set
        if ($collateral_align === null || (is_array($collateral_align) && count($collateral_align) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collateral_align when calling operateCollateral'
            );
        }

        $resourcePath = '/loan/collateral/collaterals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // body params
        $_tempBody = null;
        if (isset($collateral_align)) {
            $_tempBody = $collateral_align;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Gate APIv4 authentication
        $signHeaders = $this->config->buildSignHeaders('POST', $resourcePath, $queryParams, $httpBody);
        $headers = array_merge($headers, $signHeaders);

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserTotalAmount
     *
     * Query user's total borrowing and collateral amount
     *
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\UserTotalAmount
     */
    public function getUserTotalAmount()
    {
        list($response) = $this->getUserTotalAmountWithHttpInfo();
        return $response;
    }

    /**
     * Operation getUserTotalAmountWithHttpInfo
     *
     * Query user's total borrowing and collateral amount
     *
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\UserTotalAmount, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserTotalAmountWithHttpInfo()
    {
        $request = $this->getUserTotalAmountRequest();

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $responseBody = $e->getResponse() ? (string) $e->getResponse()->getBody() : null;
            if ($responseBody != null) {
                $gateError = json_decode($responseBody, true);
                if ($gateError !== null && isset($gateError['label'])) {
                    throw new GateApiException(
                        $gateError,
                        $e->getCode(),
                        $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                        $responseBody
                    );
                }
            }
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $responseBody
            );
        }

        $returnType = '\GateApi\Model\UserTotalAmount';
        $responseBody = $response->getBody();
        if ($returnType === '\SplFileObject') {
            $content = $responseBody; //stream goes to serializer
        } else {
            $content = (string) $responseBody;
        }

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Operation getUserTotalAmountAsync
     *
     * Query user's total borrowing and collateral amount
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserTotalAmountAsync()
    {
        return $this->getUserTotalAmountAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserTotalAmountAsyncWithHttpInfo
     *
     * Query user's total borrowing and collateral amount
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserTotalAmountAsyncWithHttpInfo()
    {
        $returnType = '\GateApi\Model\UserTotalAmount';
        $request = $this->getUserTotalAmountRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserTotalAmount'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUserTotalAmountRequest()
    {

        $resourcePath = '/loan/collateral/total_amount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Gate APIv4 authentication
        $signHeaders = $this->config->buildSignHeaders('GET', $resourcePath, $queryParams, $httpBody);
        $headers = array_merge($headers, $signHeaders);

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserLtvInfo
     *
     * Query user's collateralization ratio and remaining borrowable currencies
     *
     * @param  string $collateral_currency Collateral currency (required)
     * @param  string $borrow_currency Borrowed currency (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\UserLtvInfo
     */
    public function getUserLtvInfo($collateral_currency, $borrow_currency)
    {
        list($response) = $this->getUserLtvInfoWithHttpInfo($collateral_currency, $borrow_currency);
        return $response;
    }

    /**
     * Operation getUserLtvInfoWithHttpInfo
     *
     * Query user's collateralization ratio and remaining borrowable currencies
     *
     * @param  string $collateral_currency Collateral currency (required)
     * @param  string $borrow_currency Borrowed currency (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\UserLtvInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserLtvInfoWithHttpInfo($collateral_currency, $borrow_currency)
    {
        $request = $this->getUserLtvInfoRequest($collateral_currency, $borrow_currency);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $responseBody = $e->getResponse() ? (string) $e->getResponse()->getBody() : null;
            if ($responseBody != null) {
                $gateError = json_decode($responseBody, true);
                if ($gateError !== null && isset($gateError['label'])) {
                    throw new GateApiException(
                        $gateError,
                        $e->getCode(),
                        $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                        $responseBody
                    );
                }
            }
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $responseBody
            );
        }

        $returnType = '\GateApi\Model\UserLtvInfo';
        $responseBody = $response->getBody();
        if ($returnType === '\SplFileObject') {
            $content = $responseBody; //stream goes to serializer
        } else {
            $content = (string) $responseBody;
        }

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Operation getUserLtvInfoAsync
     *
     * Query user's collateralization ratio and remaining borrowable currencies
     *
     * @param  string $collateral_currency Collateral currency (required)
     * @param  string $borrow_currency Borrowed currency (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserLtvInfoAsync($collateral_currency, $borrow_currency)
    {
        return $this->getUserLtvInfoAsyncWithHttpInfo($collateral_currency, $borrow_currency)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserLtvInfoAsyncWithHttpInfo
     *
     * Query user's collateralization ratio and remaining borrowable currencies
     *
     * @param  string $collateral_currency Collateral currency (required)
     * @param  string $borrow_currency Borrowed currency (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserLtvInfoAsyncWithHttpInfo($collateral_currency, $borrow_currency)
    {
        $returnType = '\GateApi\Model\UserLtvInfo';
        $request = $this->getUserLtvInfoRequest($collateral_currency, $borrow_currency);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserLtvInfo'
     *
     * @param  string $collateral_currency Collateral currency (required)
     * @param  string $borrow_currency Borrowed currency (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUserLtvInfoRequest($collateral_currency, $borrow_currency)
    {
        // verify the required parameter 'collateral_currency' is set
        if ($collateral_currency === null || (is_array($collateral_currency) && count($collateral_currency) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collateral_currency when calling getUserLtvInfo'
            );
        }
        // verify the required parameter 'borrow_currency' is set
        if ($borrow_currency === null || (is_array($borrow_currency) && count($borrow_currency) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $borrow_currency when calling getUserLtvInfo'
            );
        }

        $resourcePath = '/loan/collateral/ltv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($collateral_currency !== null) {
            if('form' === 'form' && is_array($collateral_currency)) {
                foreach($collateral_currency as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['collateral_currency'] = $collateral_currency;
            }
        }

        // query params
        if ($borrow_currency !== null) {
            if('form' === 'form' && is_array($borrow_currency)) {
                foreach($borrow_currency as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['borrow_currency'] = $borrow_currency;
            }
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Gate APIv4 authentication
        $signHeaders = $this->config->buildSignHeaders('GET', $resourcePath, $queryParams, $httpBody);
        $headers = array_merge($headers, $signHeaders);

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCollateralCurrencies
     *
     * Query supported borrowing and collateral currencies
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $loan_currency Parameter loan_currency. If omitted, returns all supported borrowing currencies; if provided, returns the array of collateral currencies supported for that borrowing currency (optional)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\CollateralLoanCurrency[]
     */
    public function listCollateralCurrencies($associative_array)
    {
        list($response) = $this->listCollateralCurrenciesWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation listCollateralCurrenciesWithHttpInfo
     *
     * Query supported borrowing and collateral currencies
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $loan_currency Parameter loan_currency. If omitted, returns all supported borrowing currencies; if provided, returns the array of collateral currencies supported for that borrowing currency (optional)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\CollateralLoanCurrency[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listCollateralCurrenciesWithHttpInfo($associative_array)
    {
        $request = $this->listCollateralCurrenciesRequest($associative_array);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $responseBody = $e->getResponse() ? (string) $e->getResponse()->getBody() : null;
            if ($responseBody != null) {
                $gateError = json_decode($responseBody, true);
                if ($gateError !== null && isset($gateError['label'])) {
                    throw new GateApiException(
                        $gateError,
                        $e->getCode(),
                        $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                        $responseBody
                    );
                }
            }
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $responseBody
            );
        }

        $returnType = '\GateApi\Model\CollateralLoanCurrency[]';
        $responseBody = $response->getBody();
        if ($returnType === '\SplFileObject') {
            $content = $responseBody; //stream goes to serializer
        } else {
            $content = (string) $responseBody;
        }

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Operation listCollateralCurrenciesAsync
     *
     * Query supported borrowing and collateral currencies
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $loan_currency Parameter loan_currency. If omitted, returns all supported borrowing currencies; if provided, returns the array of collateral currencies supported for that borrowing currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCollateralCurrenciesAsync($associative_array)
    {
        return $this->listCollateralCurrenciesAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listCollateralCurrenciesAsyncWithHttpInfo
     *
     * Query supported borrowing and collateral currencies
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $loan_currency Parameter loan_currency. If omitted, returns all supported borrowing currencies; if provided, returns the array of collateral currencies supported for that borrowing currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCollateralCurrenciesAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\GateApi\Model\CollateralLoanCurrency[]';
        $request = $this->listCollateralCurrenciesRequest($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCollateralCurrencies'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $loan_currency Parameter loan_currency. If omitted, returns all supported borrowing currencies; if provided, returns the array of collateral currencies supported for that borrowing currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listCollateralCurrenciesRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $loan_currency = array_key_exists('loan_currency', $associative_array) ? $associative_array['loan_currency'] : null;


        $resourcePath = '/loan/collateral/currencies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($loan_currency !== null) {
            if('form' === 'form' && is_array($loan_currency)) {
                foreach($loan_currency as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loan_currency'] = $loan_currency;
            }
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
